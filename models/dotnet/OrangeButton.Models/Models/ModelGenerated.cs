//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace OrangeButton.Models
{
    

    

    /// <summary>
    /// Energy model contains energy predictions and information about the model assumptions and information sources.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModel
    {
        [Newtonsoft.Json.JsonProperty("EnergyModelName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelName EnergyModelName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModelInput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelInput EnergyModelInput { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModelOutput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelOutput EnergyModelOutput { get; set; }

        [Newtonsoft.Json.JsonProperty("ModelRunDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelRunDate ModelRunDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModelID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelID EnergyModelID { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An item or equipment that is packaged and sold as a unit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        [Newtonsoft.Json.JsonProperty("ProdName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdName ProdName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdMfr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdMfr ProdMfr { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCode ProdCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdType ProdType { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdDatasheet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdDatasheet ProdDatasheet { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdInstructions ProdInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdSpecifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdSpecifications ProdSpecifications { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCertifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCertifications ProdCertifications { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Dimension { get; set; }

        [Newtonsoft.Json.JsonProperty("Packages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Packages Packages { get; set; }

        [Newtonsoft.Json.JsonProperty("Warranties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Warranties Warranties { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdID ProdID { get; set; }

        [Newtonsoft.Json.JsonProperty("SubstituteProducts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubstituteProducts SubstituteProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("ManufacturerUPC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManufacturerUPC ManufacturerUPC { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A singular instance of a Product, usually with a serial number or other unique identifier.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Device
    {
        [Newtonsoft.Json.JsonProperty("SerialNum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerialNum SerialNum { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCode ProdCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdID ProdID { get; set; }

        [Newtonsoft.Json.JsonProperty("Firmware", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Firmware Firmware { get; set; }

        [Newtonsoft.Json.JsonProperty("MaintDateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaintDateLast MaintDateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("InServiceDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InServiceDate InServiceDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Calibration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Calibration Calibration { get; set; }

        [Newtonsoft.Json.JsonProperty("Warranties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Warranties Warranties { get; set; }

        [Newtonsoft.Json.JsonProperty("DeviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceType DeviceType { get; set; }

        [Newtonsoft.Json.JsonProperty("Components", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Components Components { get; set; }

        [Newtonsoft.Json.JsonProperty("DeviceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceName DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("DeviceUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceUUID DeviceUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("CryptographicKeyIDs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CryptographicKeyIDs CryptographicKeyIDs { get; set; }

        [Newtonsoft.Json.JsonProperty("IsMaintainable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsMaintainable IsMaintainable { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Nodes Nodes { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataRecord
    {
        [Newtonsoft.Json.JsonProperty("DeviceUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceUUID DeviceUUID { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherInstrumentDevice
    {
        [Newtonsoft.Json.JsonProperty("AccuracyClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccuracyClass AccuracyClass { get; set; }

        [Newtonsoft.Json.JsonProperty("CalibrationInterval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationInterval CalibrationInterval { get; set; }

        [Newtonsoft.Json.JsonProperty("PurchDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PurchDate PurchDate { get; set; }

        [Newtonsoft.Json.JsonProperty("DeviceCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceCost DeviceCost { get; set; }

        [Newtonsoft.Json.JsonProperty("ManufactureDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManufactureDate ManufactureDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ManualLink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManualLink ManualLink { get; set; }

        [Newtonsoft.Json.JsonProperty("OrientationInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrientationInformation OrientationInformation { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeterProduct
    {
        [Newtonsoft.Json.JsonProperty("RevenueGrade", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RevenueGrade RevenueGrade { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeterDevice
    {
        [Newtonsoft.Json.JsonProperty("CurrentTransducerRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentTransducerRatio CurrentTransducerRatio { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrientationInformation
    {
        [Newtonsoft.Json.JsonProperty("OrientationAzimuth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrientationAzimuth OrientationAzimuth { get; set; }

        [Newtonsoft.Json.JsonProperty("OrientationTilt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrientationTilt OrientationTilt { get; set; }

        [Newtonsoft.Json.JsonProperty("HeightAboveGround", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeightAboveGround HeightAboveGround { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherDataRecord
    {
        [Newtonsoft.Json.JsonProperty("IrradDirectNormal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradDirectNormal IrradDirectNormal { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradDiffuseHorizontal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradDiffuseHorizontal IrradDiffuseHorizontal { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArray IrradPlaneOfArray { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradGlobalHorizontal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradGlobalHorizontal IrradGlobalHorizontal { get; set; }

        [Newtonsoft.Json.JsonProperty("TempAmb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmb TempAmb { get; set; }

        [Newtonsoft.Json.JsonProperty("WindSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindSpeed WindSpeed { get; set; }

        [Newtonsoft.Json.JsonProperty("HumidityRelative", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HumidityRelative HumidityRelative { get; set; }

        [Newtonsoft.Json.JsonProperty("PressureAtmospheric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PressureAtmospheric PressureAtmospheric { get; set; }

        [Newtonsoft.Json.JsonProperty("Rainfall", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rainfall Rainfall { get; set; }

        [Newtonsoft.Json.JsonProperty("Snowfall", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Snowfall Snowfall { get; set; }

        [Newtonsoft.Json.JsonProperty("PrecipitationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrecipitationType PrecipitationType { get; set; }

        [Newtonsoft.Json.JsonProperty("Albedo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Albedo Albedo { get; set; }

        [Newtonsoft.Json.JsonProperty("SnowAccumulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnowAccumulation SnowAccumulation { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferenceCellMeasurement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReferenceCellMeasurement ReferenceCellMeasurement { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferenceCellMeasurement
    {
        [Newtonsoft.Json.JsonProperty("TempRefCell", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempRefCell TempRefCell { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentShortCircuit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentShortCircuit CurrentShortCircuit { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageOpenCircuit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageOpenCircuit VoltageOpenCircuit { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerMeasurements
    {
        [Newtonsoft.Json.JsonProperty("PowerAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerAC PowerAC { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerDC PowerDC { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyAC EnergyAC { get; set; }

        [Newtonsoft.Json.JsonProperty("TempMeter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempMeter TempMeter { get; set; }

        [Newtonsoft.Json.JsonProperty("TempModule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempModule TempModule { get; set; }

        [Newtonsoft.Json.JsonProperty("TempCell", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempCell TempCell { get; set; }

        [Newtonsoft.Json.JsonProperty("CurtailLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurtailLimit CurtailLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemPF", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemPF SystemPF { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailCapacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailCapacity AvailCapacity { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingInstrumentDevice
    {
        [Newtonsoft.Json.JsonProperty("SoilingInstrumentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoilingInstrumentType SoilingInstrumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("OrientationAzimuth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrientationAzimuth OrientationAzimuth { get; set; }

        [Newtonsoft.Json.JsonProperty("OrientationTilt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrientationTilt OrientationTilt { get; set; }

        [Newtonsoft.Json.JsonProperty("CalibrationDateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationDateLast CalibrationDateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("MaintDateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaintDateLast MaintDateLast { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME2848ReportingConditions
    {
        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArray IrradPlaneOfArray { get; set; }

        [Newtonsoft.Json.JsonProperty("TempAmb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmb TempAmb { get; set; }

        [Newtonsoft.Json.JsonProperty("WindSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindSpeed WindSpeed { get; set; }

        [Newtonsoft.Json.JsonProperty("RefCellCalibrationConstantAtRptCond", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RefCellCalibrationConstantAtRptCond RefCellCalibrationConstantAtRptCond { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME2848DataRecord
    {
        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArray IrradPlaneOfArray { get; set; }

        [Newtonsoft.Json.JsonProperty("TempAmb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmb TempAmb { get; set; }

        [Newtonsoft.Json.JsonProperty("WindSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindSpeed WindSpeed { get; set; }

        [Newtonsoft.Json.JsonProperty("DataSelected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataSelected DataSelected { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterVisual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterVisual DataFilterVisual { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterOutliers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterOutliers DataFilterOutliers { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterMissing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterMissing DataFilterMissing { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterCollectionSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterCollectionSystem DataFilterCollectionSystem { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterOutsideRange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterOutsideRange DataFilterOutsideRange { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterStability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterStability DataFilterStability { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterInverterClipping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterInverterClipping DataFilterInverterClipping { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterShading", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterShading DataFilterShading { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFilterInstrumentAlignment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterInstrumentAlignment DataFilterInstrumentAlignment { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterCriteria
    {
        [Newtonsoft.Json.JsonProperty("FilterIrradMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterIrradMax FilterIrradMax { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterIrradMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterIrradMin FilterIrradMin { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterTempAmbMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterTempAmbMax FilterTempAmbMax { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterTempAmbMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterTempAmbMin FilterTempAmbMin { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterWindSpeedMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterWindSpeedMax FilterWindSpeedMax { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterWindSpeedMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterWindSpeedMin FilterWindSpeedMin { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterPowerACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterPowerACMax FilterPowerACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterPowerACMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterPowerACMin FilterPowerACMin { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterIrradStabilityMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterIrradStabilityMax FilterIrradStabilityMax { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterIrradStabilityWindowLen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterIrradStabilityWindowLen FilterIrradStabilityWindowLen { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME2848Model
    {
        [Newtonsoft.Json.JsonProperty("ASTME28484ModelCoeffA1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASTME28484ModelCoeffA1 ASTME28484ModelCoeffA1 { get; set; }

        [Newtonsoft.Json.JsonProperty("ASTME28484ModelCoeffA2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASTME28484ModelCoeffA2 ASTME28484ModelCoeffA2 { get; set; }

        [Newtonsoft.Json.JsonProperty("ASTME28484ModelCoeffA3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASTME28484ModelCoeffA3 ASTME28484ModelCoeffA3 { get; set; }

        [Newtonsoft.Json.JsonProperty("ASTME28484ModelCoeffA4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASTME28484ModelCoeffA4 ASTME28484ModelCoeffA4 { get; set; }

        [Newtonsoft.Json.JsonProperty("ASTME2848PowerRtgAtRptCond", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASTME2848PowerRtgAtRptCond ASTME2848PowerRtgAtRptCond { get; set; }

        [Newtonsoft.Json.JsonProperty("ASTME2848PowerRtgUncertainty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASTME2848PowerRtgUncertainty ASTME2848PowerRtgUncertainty { get; set; }

        [Newtonsoft.Json.JsonProperty("ASTME2848ModelResidualMean", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASTME2848ModelResidualMean ASTME2848ModelResidualMean { get; set; }

        [Newtonsoft.Json.JsonProperty("ASTME2848ModelResidualStandardDeviation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASTME2848ModelResidualStandardDeviation ASTME2848ModelResidualStandardDeviation { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Physical or Mailing address
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public City City { get; set; }

        [Newtonsoft.Json.JsonProperty("StateProvince", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StateProvince StateProvince { get; set; }

        [Newtonsoft.Json.JsonProperty("ZipPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ZipPostalCode ZipPostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Country Country { get; set; }

        [Newtonsoft.Json.JsonProperty("County", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public County County { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType AddressType { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressID AddressID { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("AddrLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddrLine1 AddrLine1 { get; set; }

        [Newtonsoft.Json.JsonProperty("AddrLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddrLine2 AddrLine2 { get; set; }

        [Newtonsoft.Json.JsonProperty("AddrLine3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddrLine3 AddrLine3 { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A person or contact information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactID ContactID { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Email Email { get; set; }

        [Newtonsoft.Json.JsonProperty("MobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MobilePhone MobilePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkPhone WorkPhone { get; set; }

        [Newtonsoft.Json.JsonProperty("HomePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomePhone HomePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FirstName FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("MiddleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MiddleName MiddleName { get; set; }

        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastName LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactType ContactType { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("PreferredContactMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferredContactMethod PreferredContactMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactTimezone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactTimezone ContactTimezone { get; set; }

        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Title Title { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EngineeringReviewRequirements : global::System.Collections.Generic.List<EngineeringReviewRequirement>
    {
    
            public EngineeringReviewRequirements() : base() { }        
            public EngineeringReviewRequirements(IEnumerable<EngineeringReviewRequirement> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A review by a single engineer or other professional of a design or drawing set
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EngineeringReviewRequirement
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("StampType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StampType StampType { get; set; }

        [Newtonsoft.Json.JsonProperty("EngineeringReviewType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EngineeringReviewType EngineeringReviewType { get; set; }

        [Newtonsoft.Json.JsonProperty("RequirementLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequirementLevel RequirementLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("RequirementNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequirementNotes RequirementNotes { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The site of a solar installation or potential solar installation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Site
    {
        [Newtonsoft.Json.JsonProperty("SiteID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SiteID SiteID { get; set; }

        [Newtonsoft.Json.JsonProperty("SiteName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SiteName SiteName { get; set; }

        [Newtonsoft.Json.JsonProperty("SiteParcelID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SiteParcelID SiteParcelID { get; set; }

        [Newtonsoft.Json.JsonProperty("SiteMandatoryAccessReqrmnts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SiteMandatoryAccessReqrmnts SiteMandatoryAccessReqrmnts { get; set; }

        [Newtonsoft.Json.JsonProperty("Addresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses Addresses { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorityHavingJurisdiction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorityHavingJurisdiction AuthorityHavingJurisdiction { get; set; }

        [Newtonsoft.Json.JsonProperty("Structures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Structures Structures { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricalServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricalServices ElectricalServices { get; set; }

        [Newtonsoft.Json.JsonProperty("HomeownersAssociation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomeownersAssociation HomeownersAssociation { get; set; }

        [Newtonsoft.Json.JsonProperty("Fees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fees Fees { get; set; }

        [Newtonsoft.Json.JsonProperty("RiskDesignCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RiskDesignCriteria RiskDesignCriteria { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyConsumptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyConsumptions EnergyConsumptions { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Jobs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Jobs Jobs { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contracts Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("BatterySystems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatterySystems BatterySystems { get; set; }

        [Newtonsoft.Json.JsonProperty("PVSystems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVSystems PVSystems { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomElements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomElements CustomElements { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Addresses : global::System.Collections.Generic.List<Address>
    {
    
            public Addresses() : base() { }        
            public Addresses(IEnumerable<Address> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contacts : global::System.Collections.Generic.List<Contact>
    {
    
            public Contacts() : base() { }        
            public Contacts(IEnumerable<Contact> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Name of the city in the physical or mailing address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class City : TaxonomyElementString
    {

    }

    /// <summary>
    /// State of a Province of the mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StateProvince : TaxonomyElementString
    {

    }

    /// <summary>
    /// Zip Code / Postal Code of a mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ZipPostalCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// ISO country code where system is located.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Country : TaxonomyElementString
    {

    }

    /// <summary>
    /// Decimal value of latitude of the physical site in degrees.  Positive North of the Equator.  Negative South of the Equator
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Latitude : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Decimal value of longitude of the physical site in degrees.  Positive east of the Prime Meridian.  Negative west of the Prime Meridian.  North America is negative..
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Longitude : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// County of the physical or mailing address
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class County : TaxonomyElementString
    {

    }

    /// <summary>
    /// Email address
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Email : TaxonomyElementString
    {

    }

    /// <summary>
    /// Phone Number of a cell phone or mobile device.  This phone is expected to be able to receive text messages.  Characters like hyphen, period, x for extension are allowed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MobilePhone : TaxonomyElementString
    {

    }

    /// <summary>
    /// Phone number to be used during working hours.  Characters like hyphen, period, x for extension are allowed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkPhone : TaxonomyElementString
    {

    }

    /// <summary>
    /// Phone number to be used for high priority calls only.  Characters like hyphen, period, x for extension are allowed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomePhone : TaxonomyElementString
    {

    }

    /// <summary>
    /// First name of a person.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirstName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Middle name of a person.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MiddleName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The last name of person.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LastName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The height of ground level at a location relative to sea level.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Altitude : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A location is defined by Latitude, Longitude and Altitude.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {
        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Latitude Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Longitude Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Altitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Altitude Altitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Elevation Elevation { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationType LocationType { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationID LocationID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationDeterminationMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDeterminationMethod LocationDeterminationMethod { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Height from ground level.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Elevation : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// First line of a mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddrLine1 : TaxonomyElementString
    {

    }

    /// <summary>
    /// Second line of a mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddrLine2 : TaxonomyElementString
    {

    }

    /// <summary>
    /// Third line of a mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddrLine3 : TaxonomyElementString
    {

    }

    /// <summary>
    /// Type of design/energy production model for the PV system which could be Pvsyst, SAM, PV Watts, or Other.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A filename holding the configuration details of the energy prediction details. This could be a zip file containing multiple files. The intention is to be able to reproduce the energy predictions if needed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelConfigurationFilename : TaxonomyElementString
    {

    }

    /// <summary>
    /// Generic Text field used in fields to provide more detail
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description : TaxonomyElementString
    {

    }

    /// <summary>
    /// The applicable building code the AHJ enforces.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildingCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// Notes for special requirements related to the building code in this AHJ.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildingCodeNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// The applicable residential code the AHJ enforces.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResidentialCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// The applicable fire code the AHJ enforces.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FireCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// The applicable electric code the AHJ enforces.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElectricCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// Notes for special requirements related to the residential code in this AHJ.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResidentialCodeNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// Notes for special requirements related to the fire code in this AHJ.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FireCodeNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// Notes for special requirements related to the electric code in this AHJ.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElectricCodeNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// The method for submitting AHJ documents.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentSubmissionMethod : TaxonomyElementString
    {

    }

    /// <summary>
    /// Notes about the document submission process for this AHJ.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentSubmissionMethodNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of engineering or professional review
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EngineeringReviewType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of certifying stamp that is applied to the design or drawing set
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StampType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of the Authority Having Jurisdiction
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AHJName : TaxonomyElementString
    {

    }

    /// <summary>
    /// This field indicates if this instance of an object is required or optional. Conditionally optional the conditions can be described in RequirementNotes.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequirementLevel : TaxonomyElementString
    {

    }

    /// <summary>
    /// Method of the determining the location
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationDeterminationMethod : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of contact being specified
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The method of contact the contact prefers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreferredContactMethod : TaxonomyElementString
    {

    }

    /// <summary>
    /// The identifier of the location.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The identifier of the address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The identifier of the contact.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The timezone where the contact is located.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactTimezone : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of location being specified
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A generic URL to a file folder or a single file for transmitting documents
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileFolderURL : TaxonomyElementString
    {

    }

    /// <summary>
    /// A URL string
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class URL : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of address being specified
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A task to accomplish
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Task
    {
        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskName TaskName { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskStatus TaskStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskCompletedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskCompletedDate TaskCompletedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskID TaskID { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskDueDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskDueDate TaskDueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Checklist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Checklist Checklist { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskType TaskType { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethod PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskCreatedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskCreatedDate TaskCreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskStartedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskStartedDate TaskStartedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskResults TaskResults { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntries TimeEntries { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tasks : global::System.Collections.Generic.List<Task>
    {
    
            public Tasks() : base() { }        
            public Tasks(IEnumerable<Task> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The status of a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of utility company where the grid connection will reside.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UtilityName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Devices : global::System.Collections.Generic.List<Device>
    {
    
            public Devices() : base() { }        
            public Devices(IEnumerable<Device> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Energy consumed from all sources
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyConsumption
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Capacity in DC at Standard Test Conditions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapacityDC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Quantity of a Product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdQty : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// A product used within a PVSystem and the quantity of that product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdLineItem
    {
        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product Product { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("AmountExtended", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountExtended AmountExtended { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVSystems : global::System.Collections.Generic.List<PVSystem>
    {
    
            public PVSystems() : base() { }        
            public PVSystems(IEnumerable<PVSystem> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The projected savings to the consumer from reduced electricity demand over a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectedSavingsAmt : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The status of the operation of the PVSystem
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationalStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// The status of the operation of the PVSystem
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationalPhase : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdType : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdLineItems : global::System.Collections.Generic.List<ProdLineItem>
    {
    
            public ProdLineItems() : base() { }        
            public ProdLineItems(IEnumerable<ProdLineItem> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The status of the BillOfMaterials
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfMaterialsStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// The title of the contact
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Title : TaxonomyElementString
    {

    }

    /// <summary>
    /// The notes about the requirement level of the engineering review
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequirementNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// The date the task was completed
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskCompletedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// A structure on a site
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Structure
    {
        [Newtonsoft.Json.JsonProperty("StructureType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StructureType StructureType { get; set; }

        [Newtonsoft.Json.JsonProperty("StructureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StructureID StructureID { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricalServiceID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricalServiceID ElectricalServiceID { get; set; }

        [Newtonsoft.Json.JsonProperty("YearBuilt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YearBuilt YearBuilt { get; set; }

        [Newtonsoft.Json.JsonProperty("FoundationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FoundationType FoundationType { get; set; }

        [Newtonsoft.Json.JsonProperty("ConstructionMaterial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConstructionMaterial ConstructionMaterial { get; set; }

        [Newtonsoft.Json.JsonProperty("RiskCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RiskCategory RiskCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("RoofPlanes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoofPlanes RoofPlanes { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of Structure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StructureType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of roof of the structure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoofMaterial : TaxonomyElementString
    {

    }

    /// <summary>
    /// The combined parameters for the Seismic Load condition of a structural design
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeismicLoad
    {
        [Newtonsoft.Json.JsonProperty("MCERGroundMotionSS", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MCERGroundMotionSS MCERGroundMotionSS { get; set; }

        [Newtonsoft.Json.JsonProperty("MCERGroundMotionS1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MCERGroundMotionS1 MCERGroundMotionS1 { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    ///  MCER ground motion (period=0.2s)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MCERGroundMotionSS : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// MCER ground motion (period=1.0s)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MCERGroundMotionS1 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The ID of the structure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StructureID : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Structures : global::System.Collections.Generic.List<Structure>
    {
    
            public Structures() : base() { }        
            public Structures(IEnumerable<Structure> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The identifier of the electrical service system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElectricalServiceID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A electrical service of a site
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElectricalService
    {
        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Devices Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricalServiceID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricalServiceID ElectricalServiceID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Utility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Utility Utility { get; set; }

        [Newtonsoft.Json.JsonProperty("TempLowASHRAE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempLowASHRAE TempLowASHRAE { get; set; }

        [Newtonsoft.Json.JsonProperty("TempHighASHRAE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempHighASHRAE TempHighASHRAE { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricalServiceRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricalServiceRating ElectricalServiceRating { get; set; }

        [Newtonsoft.Json.JsonProperty("InterconnectionVoltage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterconnectionVoltage InterconnectionVoltage { get; set; }

        [Newtonsoft.Json.JsonProperty("InterconnectionPhaseType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterconnectionPhaseType InterconnectionPhaseType { get; set; }

        [Newtonsoft.Json.JsonProperty("InterconnectionPhase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterconnectionPhase InterconnectionPhase { get; set; }

        [Newtonsoft.Json.JsonProperty("TariffStructure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TariffStructure TariffStructure { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The ambient dry bulb extreme low temperature for the wire sizing calculations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempLowASHRAE : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The ambient dry bulb high temperature for the wire sizing calculations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempHighASHRAE : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The risk category from ASCE7
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskCategory : TaxonomyElementString
    {

    }

    /// <summary>
    /// The wind code adopted by the authority having jurisdiction
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WindCode : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElectricalServices : global::System.Collections.Generic.List<ElectricalService>
    {
    
            public ElectricalServices() : base() { }        
            public ElectricalServices(IEnumerable<ElectricalService> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The rating of the main electrical service breaker
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElectricalServiceRating : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The notes about the wind code if there are special requirements
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WindCodeNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// The UUID of the task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The year the structure was built
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YearBuilt : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the homeowner's association
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HOAName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of foundation the structure has
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FoundationType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of construction of the structure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConstructionMaterial : TaxonomyElementString
    {

    }

    /// <summary>
    /// The risk design criteria
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskDesignCriteria
    {
        [Newtonsoft.Json.JsonProperty("SeismicLoad", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeismicLoad SeismicLoad { get; set; }

        [Newtonsoft.Json.JsonProperty("ExposureCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExposureCategory ExposureCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("SnowLoads", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnowLoads SnowLoads { get; set; }

        [Newtonsoft.Json.JsonProperty("WindLoads", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindLoads WindLoads { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The exposure category of the RiskDesignCriteria as defined by the ASCE 7 Standard
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExposureCategory : TaxonomyElementString
    {

    }

    /// <summary>
    /// The voltage of the utility being interconnected too
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InterconnectionVoltage : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// The output phase type of a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InterconnectionPhaseType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A fee for a good or service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeStructure
    {
        [Newtonsoft.Json.JsonProperty("FeeStructureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeStructureID FeeStructureID { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeStructureName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeStructureName FeeStructureName { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeStructureType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeStructureType FeeStructureType { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of fee period
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeStructureType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the fee payment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The ID of a particular fee
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeID : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeStructures : global::System.Collections.Generic.List<FeeStructure>
    {
    
            public FeeStructures() : base() { }        
            public FeeStructures(IEnumerable<FeeStructure> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The uuid of the FeeStructure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeStructureID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A fee for a good or service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee
    {
        [Newtonsoft.Json.JsonProperty("FeeID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeID FeeID { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeName FeeName { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeStructureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeStructureID FeeStructureID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the FeeStructure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeStructureName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fees : global::System.Collections.Generic.List<Fee>
    {
    
            public Fees() : base() { }        
            public Fees(IEnumerable<Fee> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The due date of a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskDueDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The state letters and GeoID as described by the Census FIPS code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AHJCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// An Checklist or survey
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Checklist
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ChecklistType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecklistType ChecklistType { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionID TransactionID { get; set; }

        [Newtonsoft.Json.JsonProperty("ChecklistDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecklistDate ChecklistDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Questions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Questions Questions { get; set; }

        [Newtonsoft.Json.JsonProperty("Answers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Answers Answers { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The result of an Checklist question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Answer
    {
        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerValue AnswerValue { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionLineID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionLineID TransactionLineID { get; set; }

        [Newtonsoft.Json.JsonProperty("QuestionID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestionID QuestionID { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerValues AnswerValues { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A question for an Checklist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Question
    {
        [Newtonsoft.Json.JsonProperty("QuestionID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestionID QuestionID { get; set; }

        [Newtonsoft.Json.JsonProperty("QuestionLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestionLabel QuestionLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerType AnswerType { get; set; }

        [Newtonsoft.Json.JsonProperty("QuestionUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestionUnits QuestionUnits { get; set; }

        [Newtonsoft.Json.JsonProperty("RequirementLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequirementLevel RequirementLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("RequirementNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequirementNotes RequirementNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerOptions AnswerOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerRangeMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerRangeMin AnswerRangeMin { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerRangeMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerRangeMax AnswerRangeMax { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An ID for the Checklist question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The statement of the Checklist Question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionLabel : TaxonomyElementString
    {

    }

    /// <summary>
    /// The value of the Checklist Result
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerValue : TaxonomyElementString
    {

    }

    /// <summary>
    /// The ID of the transaction line
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionLineID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of Checklist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecklistType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The ID of the transaction
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of result expected by the question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The date of the Checklist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecklistDate : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Answers : global::System.Collections.Generic.List<Answer>
    {
    
            public Answers() : base() { }        
            public Answers(IEnumerable<Answer> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Questions : global::System.Collections.Generic.List<Question>
    {
    
            public Questions() : base() { }        
            public Questions(IEnumerable<Question> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A valid value for an enumeration in a list
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Enumeration : TaxonomyElementString
    {

    }

    /// <summary>
    /// The phase of the interconnection
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InterconnectionPhase : TaxonomyElementString
    {

    }

    /// <summary>
    /// The structure of a Tariff which is the sale of a commodity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TariffStructure
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("TariffStructureName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TariffStructureName TariffStructureName { get; set; }

        [Newtonsoft.Json.JsonProperty("TariffStructureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TariffStructureID TariffStructureID { get; set; }

        [Newtonsoft.Json.JsonProperty("TariffStructureType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TariffStructureType TariffStructureType { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the Tariff
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TariffStructureName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The ID of the Tariff
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TariffStructureID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of Tariff
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TariffStructureType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A currency amount
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The units of the question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionUnits : TaxonomyElementString
    {

    }

    /// <summary>
    /// A account
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account
    {
        [Newtonsoft.Json.JsonProperty("AccountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountType AccountType { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("AccountName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountName AccountName { get; set; }

        [Newtonsoft.Json.JsonProperty("AccountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumber AccountNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("AccountRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountRole AccountRole { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of account
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the account
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The account number
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountNumber : TaxonomyElementString
    {

    }

    /// <summary>
    /// The role the account plays in the reporting systems
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountRole : TaxonomyElementString
    {

    }

    /// <summary>
    /// The balance of an account
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountBalance
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Account Account { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountBalances : global::System.Collections.Generic.List<AccountBalance>
    {
    
            public AccountBalances() : base() { }        
            public AccountBalances(IEnumerable<AccountBalance> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Sum of the aging amounts of transactions for a particular time period
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgingBucket
    {
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Account Account { get; set; }

        [Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("AgingBucketType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgingBucketType AgingBucketType { get; set; }

        [Newtonsoft.Json.JsonProperty("AccountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountType AccountType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The number of past due days that the transactions are to be included in this aging bucket
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartPastDueDays : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// The number of past due days that the transactions are to be included in this aging bucket
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndPastDueDays : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// The type of aging bucket
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgingBucketType : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgingBuckets : global::System.Collections.Generic.List<AgingBucket>
    {
    
            public AgingBuckets() : base() { }        
            public AgingBuckets(IEnumerable<AgingBucket> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyConsumptions : global::System.Collections.Generic.List<EnergyConsumption>
    {
    
            public EnergyConsumptions() : base() { }        
            public EnergyConsumptions(IEnumerable<EnergyConsumption> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The datasheet for the product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdDatasheet : TaxonomyElementString
    {

    }

    /// <summary>
    /// A single document in a collection of the instructions for a product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdInstruction : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdInstructions : global::System.Collections.Generic.List<ProdInstruction>
    {
    
            public ProdInstructions() : base() { }        
            public ProdInstructions(IEnumerable<ProdInstruction> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Use this for describing an individual specification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecificationName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The enumerated list of the types of major specifications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecificationType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The specific unit of the specification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecificationUnit : TaxonomyElementString
    {

    }

    /// <summary>
    /// The value of the specific Specification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecificationValue : TaxonomyElementString
    {

    }

    /// <summary>
    /// A single specification for a product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdSpecification
    {
        [Newtonsoft.Json.JsonProperty("SpecificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecificationName SpecificationName { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecificationType SpecificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecificationUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecificationUnit SpecificationUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecificationValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecificationValue SpecificationValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdSpecifications : global::System.Collections.Generic.List<ProdSpecification>
    {
    
            public ProdSpecifications() : base() { }        
            public ProdSpecifications(IEnumerable<ProdSpecification> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A certification for a product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdCertification
    {
        [Newtonsoft.Json.JsonProperty("CertificationAgency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationAgency CertificationAgency { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationDate CertificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationExpirationDate CertificationExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationName CertificationName { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateValue CertificateValue { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationStandard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationStandard CertificationStandard { get; set; }

        [Newtonsoft.Json.JsonProperty("Firmware", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Firmware Firmware { get; set; }

        [Newtonsoft.Json.JsonProperty("TestLab", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestLab TestLab { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the certification name
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationAgencyName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdCertifications : global::System.Collections.Generic.List<ProdCertification>
    {
    
            public ProdCertifications() : base() { }        
            public ProdCertifications(IEnumerable<ProdCertification> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The aging balance from 1 to 30 days
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgingBalance1To30Days : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Aging balance from 31 to 60 days
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgingBalance31To60Days : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Aging balance from 61 to 90 days
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgingBalance61to90Days : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Aging balance from 91 to 120 days
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgingBalance91to120Days : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The aging balance over 120 days
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgingBalanceOver120Days : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The UUID of the task type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskTypeID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A structural wind load
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WindLoad
    {
        [Newtonsoft.Json.JsonProperty("WindCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindCode WindCode { get; set; }

        [Newtonsoft.Json.JsonProperty("WindSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindSpeed WindSpeed { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A structural snow load
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnowLoad
    {
        [Newtonsoft.Json.JsonProperty("SnowPressure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnowPressure SnowPressure { get; set; }

        [Newtonsoft.Json.JsonProperty("SnowCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnowCode SnowCode { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Velocity of the wind, typically measured at 3m height above ground.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WindSpeed : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The design pressure to be applied to a structure for snow loading
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnowPressure : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnowLoads : global::System.Collections.Generic.List<SnowLoad>
    {
    
            public SnowLoads() : base() { }        
            public SnowLoads(IEnumerable<SnowLoad> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The code for the local snow loading design
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnowCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// The message of the error
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorMessage : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the error
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The code of an error
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// The number of days the jurisdiction on average takes to complete a permit
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EstimatedTurnaroundDays : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// An inspection conducted by the local AHJ
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AHJInspection
    {
        [Newtonsoft.Json.JsonProperty("AHJInspectionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AHJInspectionName AHJInspectionName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("AHJInspectionNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AHJInspectionNotes AHJInspectionNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("InspectionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InspectionType InspectionType { get; set; }

        [Newtonsoft.Json.JsonProperty("TechnicianRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TechnicianRequired TechnicianRequired { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the inspection
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AHJInspectionName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The notes about the inspection
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AHJInspectionNotes : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AHJInspections : global::System.Collections.Generic.List<AHJInspection>
    {
    
            public AHJInspections() : base() { }        
            public AHJInspections(IEnumerable<AHJInspection> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The method by which the permit is issued
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermitIssueMethod : TaxonomyElementString
    {

    }

    /// <summary>
    /// The notes about the method of issuing permits the AHJ uses
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermitIssueMethodNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of inspection
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InspectionType : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerValues : global::System.Collections.Generic.List<AnswerValue>
    {
    
            public AnswerValues() : base() { }        
            public AnswerValues(IEnumerable<AnswerValue> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerOptions : global::System.Collections.Generic.List<AnswerOption>
    {
    
            public AnswerOptions() : base() { }        
            public AnswerOptions(IEnumerable<AnswerOption> collection) : base(collection) { }
    
    }

    /// <summary>
    /// An option for the answer to a question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerOption : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatterySystems : global::System.Collections.Generic.List<BatterySystem>
    {
    
            public BatterySystems() : base() { }        
            public BatterySystems(IEnumerable<BatterySystem> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A loan
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Loan
    {
        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("LoanTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanTerm LoanTerm { get; set; }

        [Newtonsoft.Json.JsonProperty("Fees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fees Fees { get; set; }

        [Newtonsoft.Json.JsonProperty("LoanRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanRate LoanRate { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Tasks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tasks Tasks { get; set; }

        [Newtonsoft.Json.JsonProperty("LoanID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanID LoanID { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The length of the loan
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanTerm : TaxonomyElementString
    {

    }

    /// <summary>
    /// The percentage rate of the loan
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanRate : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The UUID of an object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UUID : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WindLoads : global::System.Collections.Generic.List<WindLoad>
    {
    
            public WindLoads() : base() { }        
            public WindLoads(IEnumerable<WindLoad> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The type of a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskType
    {
        [Newtonsoft.Json.JsonProperty("TaskTypeID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskTypeID TaskTypeID { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskTypeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskTypeName TaskTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskGroup TaskGroup { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of a TaskType
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskTypeName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The UUID of the task category
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskCategoryID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the task category which is used to normalize task types when searching across multiple companies.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskGroup : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of a fee
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeType
    {
        [Newtonsoft.Json.JsonProperty("FeeTypeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeTypeName FeeTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeGroup FeeGroup { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of a FeeType
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeTypeName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A optional normalized list of FeeTypes that allow for searching across multiple company datasets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeGroup : TaxonomyElementString
    {

    }

    /// <summary>
    /// If a on-site Technician from the AHJ is required to complete the AHJInspection
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TechnicianRequired : TaxonomyElementBoolean
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermitIssueMethods : global::System.Collections.Generic.List<PermitIssueMethod>
    {
    
            public PermitIssueMethods() : base() { }        
            public PermitIssueMethods(IEnumerable<PermitIssueMethod> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentSubmissionMethods : global::System.Collections.Generic.List<DocumentSubmissionMethod>
    {
    
            public DocumentSubmissionMethods() : base() { }        
            public DocumentSubmissionMethods(IEnumerable<DocumentSubmissionMethod> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Service
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceName ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceID ServiceID { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceType ServiceType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A quantity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quantity : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// A ServiceLineItem
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceLineItem
    {
        [Newtonsoft.Json.JsonProperty("Service", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Service Service { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceQuantityUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceQuantityUnit ServiceQuantityUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("ServicePaidTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServicePaidTo ServicePaidTo { get; set; }

        [Newtonsoft.Json.JsonProperty("ServicePaidBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServicePaidBy ServicePaidBy { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnitPrice UnitPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("AmountExtended", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountExtended AmountExtended { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the person or organization providing the service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceProvider : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceLineItems : global::System.Collections.Generic.List<ServiceLineItem>
    {
    
            public ServiceLineItems() : base() { }        
            public ServiceLineItems(IEnumerable<ServiceLineItem> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The scope of work for the given context in which the object appears.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfServices
    {
        [Newtonsoft.Json.JsonProperty("ServiceLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceLineItems ServiceLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfServicesStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfServicesStatus BillOfServicesStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The status of the overall scope of work
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfServicesStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// The UUID of the service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The method by which the cost of a service is evaluated.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceQuantityUnit : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of Service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceType
    {
        [Newtonsoft.Json.JsonProperty("ServiceTypeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceTypeName ServiceTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceTypeID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceTypeID ServiceTypeID { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceGroup ServiceGroup { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the service type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceTypeName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The UUID of the ServiceType
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceTypeID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The optional list of normalized services that allow for cross-platform comparison of service data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceGroup : TaxonomyElementString
    {

    }

    /// <summary>
    /// Information on who or what is performing the payment responsibility of the service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServicePaymentResponsibility : TaxonomyElementString
    {

    }

    /// <summary>
    /// The Service Payment Responsibility for the Payee of the Service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServicePaidTo : TaxonomyElementString
    {

    }

    /// <summary>
    /// The Service Payment Responsibility for the Payer of the Service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServicePaidBy : TaxonomyElementString
    {

    }

    /// <summary>
    /// Amount Per ServiceQuantityUnit
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitPrice : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The total amount of the individual line item calculated by multiplying Quantity by UnitPrice
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmountExtended : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum AC capacity or load that the busbar is rated to handle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusbarCapacityAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A combiner joins several DC circuits.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdCombiner : Product
    {
        [Newtonsoft.Json.JsonProperty("BusbarCapacityAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusbarCapacityAC BusbarCapacityAC { get; set; }

    }

    /// <summary>
    /// Height above ground level
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HeightAboveGround : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Coefficient a3 in Equation 1 of ASTM E2848-11, P = E(a1 + a2 x E + a3 x Ta + a4 x V) where P is power, E is in-plane irradiance, Ta is ambient air temperature and V is wind speed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME28484ModelCoeffA3 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Amount of rainfall in a given period of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rainfall : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Lower limit on irradiance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterIrradMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Azimuth of the sun, measured in degrees. The horizontal angle measured clockwise from true north, e.g. True North = 0 degrees, East = 90 degrees, South = 180 degrees, etc.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrientationAzimuth : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Universally unique identifier for the site.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Ratio between the amount of moisture in the air and the maximum amount of moisture that could be present in the air at current air temperature.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HumidityRelative : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Mean value of the residuals of the regression model at ASTM E2848-11 Eq. 1.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME2848ModelResidualMean : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Temperature of a cell in a module.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempCell : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Lower limit on wind speed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterWindSpeedMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Lower limit on AC power.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterPowerACMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Current of a photovoltaic device at short circuit conditions.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentShortCircuit : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Voltage at open circuit conditions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageOpenCircuit : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Indicator that data passes checks for values outside of acceptable range.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterOutsideRange : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Standard deviation of the residuals of the regression model at ASTM E2848-11 Eq. 1.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME2848ModelResidualStandardDeviation : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Temperature of a power measurement device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempMeter : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Ratio of reference cell current to irradiance at spectrum for reporting condition, termed C_RC in ASTM E2848-11. Units of A/(W/m2).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefCellCalibrationConstantAtRptCond : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Temperature measured at the back of a module.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempModule : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Power rating P0 at reporting condition calculated using fitted model. Calculated by Equation 2 of ASTM E2848-11, P0 = E(a1 + a2 x E + a3 x Ta + a4 x V) where E is in-plane irradiance, Ta is ambient air temperature and V is wind speed at the reporting condition.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME2848PowerRtgAtRptCond : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Manufacture date of the device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManufactureDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The air pressure at the location of the weather data record
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PressureAtmospheric : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Coefficient a1 in Equation 1 of ASTM E2848-11, P = E(a1 + a2 x E + a3 x Ta + a4 x V) where P is power, E is in-plane irradiance, Ta is ambient air temperature and V is wind speed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME28484ModelCoeffA1 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Manufacturer's serial number of a device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SerialNum : TaxonomyElementString
    {

    }

    /// <summary>
    /// Accuracy class of an instrument. The string should identify the standard where applicable, or a term in common use by calibration laboratories. For example, for a pyranometer, accuracy class can be "Secondary Standard". For an AC power meter, accuracy class could be "ANSI C12.20-2015 Class 0.5".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccuracyClass : TaxonomyElementString
    {

    }

    /// <summary>
    /// The amount of direct irradiance received per unit area on a surface that is perpendicular (or normal) to the direction of the sun. Direct irradiance, also termed beam irradiance, is not scattered or reflected by the atmosphere, clouds, or other surfaces before arriving at the surface of measurement. Direct normal irradiance is measured in watts per square meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradDirectNormal : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Upper limit on irradiance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterIrradMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Power (DC) measured at an instant in time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerDC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Current Transducer Ratio (CT Ratio).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentTransducerRatio : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Expanded uncertainty of the power rating at the reference condition. See ASTM E2848-11 paragraph 9.4 for guidance on calculating the expanded uncertainty.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME2848PowerRtgUncertainty : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Indicator that data passes checks for periods of inverter clipping or operating away from maximum power point tracking.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterInverterClipping : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Coefficient a4 in Equation 1 of ASTM E2848-11, P = E(a1 + a2 x E + a3 x Ta + a4 x V) where P is power, E is in-plane irradiance, Ta is ambient air temperature and V is wind speed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME28484ModelCoeffA4 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Description of mandatory requirements for access to the site, such as background checks.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteMandatoryAccessReqrmnts : TaxonomyElementString
    {

    }

    /// <summary>
    /// Power factor setting of the power system which is defined as the ratio of the real power flowing to the load, to the apparent power in the circuit. It is a dimensionless number in the closed internal of -1 to +1.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemPF : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Total amount of shortwave radiation received per unit area on a horizontal surface. Measured in watts per square meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradGlobalHorizontal : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Coefficient a2 in Equation 1 of ASTM E2848-11, P = E(a1 + a2 x E + a3 x Ta + a4 x V) where P is power, E is in-plane irradiance, Ta is ambient air temperature and V is wind speed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASTME28484ModelCoeffA2 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Indicator that data passes checks for data collection system faults or outages.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterCollectionSystem : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Date of latest maintenance activity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaintDateLast : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of the product, for example ABC Brand Inverter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Temperature of the air.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempAmb : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Indicator that data passes checks for alignment between an irradiance instrument and a PV system's plane of array.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterInstrumentAlignment : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Energy (AC) measured for a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Percentage of light that is reflected off the ground surface
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Albedo : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The array's tilt angle in degrees from horizontal, where zero degrees is horizontal, and 90 degrees is vertical and facing the equator (in both the southern and northern hemispheres)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrientationTilt : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Upper limit on AC power.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterPowerACMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Weather source used for the model, for example: ground measurements, NSRDB TMY3, SolarAnywhere v3.0, SolarGIS vX.Y
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelWeatherSource : TaxonomyElementString
    {

    }

    /// <summary>
    /// The recommended time interval between calibrations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalibrationInterval : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Type of precipitation according to SYNOP codes
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrecipitationType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Indicates data inclusion or exclusion. True if data is retained; False if data is excluded.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataSelected : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Link to the device manual.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManualLink : TaxonomyElementString
    {

    }

    /// <summary>
    /// Upper limit on ambient air temperature.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterTempAmbMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Name of the product or equipment manufacturer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdMfr : TaxonomyElementString
    {

    }

    /// <summary>
    /// Description of calibration method for an instrument.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalibrationMeth : TaxonomyElementString
    {

    }

    /// <summary>
    /// True if Product is revenue grade quality.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevenueGrade : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Type of soiling instrument.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingInstrumentType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Purchase date of the device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// A product code is a standardized, unique human-readable identifier that is compact, and can be easily parsed. It consists of an entity code concatenated to a product specific identification string, separated by a hyphen. The format of a product code is: [EntityCode]-[ProductString], e.g., “HANWH-Q_PEAK_DUO_BLK_G10__AC_365”. A product string is comprised of upper-case letters, numbers, and underscores. Any character that is not a letter or number is a special character and will be replaced by an underscore. All letter characters will be upper case. To avoid clashes between identical product codes, an additional hyphen and an integer 1, 2, 3, ..., is appended, e.g. {ProdCode}-{incremental number}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// Indicator that data passes tests for outlier values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterOutliers : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Indicator that data pass checks by visual examination.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterVisual : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Depth of snow on the ground during a given period of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnowAccumulation : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Indicator that data passes tests that detect missing values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterMissing : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Date of last calibration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalibrationDateLast : TaxonomyElementString
    {

    }

    /// <summary>
    /// Maximum coefficient of variation (ratio of standard deviation to mean) of irradiance during a window of data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterIrradStabilityMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Assessors parcel number, or APN, which is a number assigned to parcels of real property by the tax assessor of a particular jurisdiction for purposes of identification and record-keeping.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteParcelID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Temperature of a reference cell.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempRefCell : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Duration of a window for determining irradiance stability.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterIrradStabilityWindowLen : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Indicator that data passes checks for periods of time where the irradiance instrument or PV system is shaded by nearby structures, soiling, snow, frost or other cause.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterShading : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Upper limit on wind speed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterWindSpeedMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Indicator that data values pass checks for unstable values, e.g., where data values change more than a threshold in a time interval.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataFilterStability : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// The amount of diffuse radiation received per unit area on a horizontal surface. Diffuse irradiance arrives at the surface of measurement from any direction other than the direction of the sun. Diffuse horizontal irradiance is measured in watts per square meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradDiffuseHorizontal : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Name of the site.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Curtailment limit on AC power during a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurtailLimit : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Upper limit on ambient air temperature.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterTempAmbMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The irradiance on a plane from all sources, both direct and diffuse. The plane can be horizontal or tilted. Plane of array irradiance is measured in watts per square meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradPlaneOfArray : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Identifier of the municipal authority, for example, town, city or county, that has jurisdiction to define local code requirements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AHJID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Power (AC) measured at an instant in time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Amount of snowfall in a given period of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Snowfall : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Aggregate cost of the device from start of the installation to date.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceCost : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Value for the instance element
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValueArrayNumber : global::System.Collections.Generic.List<double>
    {
    
            public ValueArrayNumber() : base() { }        
            public ValueArrayNumber(IEnumerable<double> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Value for the instance element
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValueArrayString : global::System.Collections.Generic.List<string>
    {
    
            public ValueArrayString() : base() { }        
            public ValueArrayString(IEnumerable<string> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Value for the instance element
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValueArrayBoolean : global::System.Collections.Generic.List<bool>
    {
    
            public ValueArrayBoolean() : base() { }        
            public ValueArrayBoolean(IEnumerable<bool> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Value for the instance element
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValueArrayInteger : global::System.Collections.Generic.List<int>
    {
    
            public ValueArrayInteger() : base() { }        
            public ValueArrayInteger(IEnumerable<int> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementNumber
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementInteger
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementBoolean
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementArrayNumber
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueArrayNumber Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementArrayString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueArrayString Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementArrayBoolean
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueArrayBoolean Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementArrayInteger
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueArrayInteger Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Azimuth relative to North where North is 0 degrees and East is 90 degrees
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Azimuth : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A UUID for identifying a specific string
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVStringID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Area
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Area : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Tilt is the angle relative to horizontal. Horizontal is defined as the x,y plane of a right-hand coordinate system where the the x-axis is East, y-axis is North, and the z-axis is vertical.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tilt : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Roll is a right-hand rotation about an oriented axis, with a positive value being a counter-clockwise rotation. In the context of a solar module, Roll is the rotation of the module about the vector normal to the module's plane that is oriented towards the sky.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Roll : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The UUID of the roofplane
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoofPlaneID : TaxonomyElementString
    {

    }

    /// <summary>
    /// An array of modules within a PVSystem that have a common orientation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVArray
    {
        [Newtonsoft.Json.JsonProperty("PVStrings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVStrings PVStrings { get; set; }

        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Orientation Orientation { get; set; }

        [Newtonsoft.Json.JsonProperty("Area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Area Area { get; set; }

        [Newtonsoft.Json.JsonProperty("RoofPlaneID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoofPlaneID RoofPlaneID { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductLineItems ProductLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Devices Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("PVArrayID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVArrayID PVArrayID { get; set; }

        [Newtonsoft.Json.JsonProperty("ModuleOrientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleOrientation ModuleOrientation { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVStrings : global::System.Collections.Generic.List<PVString>
    {
    
            public PVStrings() : base() { }        
            public PVStrings(IEnumerable<PVString> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A string of Modules within a PVSystem
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVString
    {
        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Devices Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Orientation Orientation { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductLineItems ProductLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("PVStringID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVStringID PVStringID { get; set; }

        [Newtonsoft.Json.JsonProperty("ModuleOrientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleOrientation ModuleOrientation { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Orientation is defined by Azimuth, Tilt and Roll. Azimuth and Tilt are defined in the context of a right-hand coordinate system where the the x-axis is East, y-axis is North, and the z-axis is vertical.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orientation
    {
        [Newtonsoft.Json.JsonProperty("Azimuth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Azimuth Azimuth { get; set; }

        [Newtonsoft.Json.JsonProperty("Tilt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tilt Tilt { get; set; }

        [Newtonsoft.Json.JsonProperty("Roll", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Roll Roll { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductLineItems : global::System.Collections.Generic.List<ProductLineItem>
    {
    
            public ProductLineItems() : base() { }        
            public ProductLineItems(IEnumerable<ProductLineItem> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A product used within a PVSystem and the quantity of that product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductLineItem
    {
        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product Product { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("AmountExtended", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountExtended AmountExtended { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVArrays : global::System.Collections.Generic.List<PVArray>
    {
    
            public PVArrays() : base() { }        
            public PVArrays(IEnumerable<PVArray> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Equipment that converts electricity from DC to AC
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdInverter : Product
    {
        [Newtonsoft.Json.JsonProperty("InverterStyle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverterStyle InverterStyle { get; set; }

        [Newtonsoft.Json.JsonProperty("Grounding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Grounding Grounding { get; set; }

        [Newtonsoft.Json.JsonProperty("Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Dimension { get; set; }

        [Newtonsoft.Json.JsonProperty("InverterEfficiency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverterEfficiency InverterEfficiency { get; set; }

        [Newtonsoft.Json.JsonProperty("DCInput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DCInput DCInput { get; set; }

        [Newtonsoft.Json.JsonProperty("InverterSwitchoverTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverterSwitchoverTime InverterSwitchoverTime { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageDCInverterStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCInverterStart VoltageDCInverterStart { get; set; }

        [Newtonsoft.Json.JsonProperty("ACOutputs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ACOutputs ACOutputs { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalHarmonicDistortionPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalHarmonicDistortionPower TotalHarmonicDistortionPower { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalHarmonicDistortionCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalHarmonicDistortionCurrent TotalHarmonicDistortionCurrent { get; set; }

        [Newtonsoft.Json.JsonProperty("IsHybrid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsHybrid IsHybrid { get; set; }

        [Newtonsoft.Json.JsonProperty("CECNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CECNotes CECNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMeter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HasMeter HasMeter { get; set; }

        [Newtonsoft.Json.JsonProperty("NightTare", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NightTare NightTare { get; set; }

        [Newtonsoft.Json.JsonProperty("GridInterfaceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridInterfaceType GridInterfaceType { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPVInputCapable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsPVInputCapable IsPVInputCapable { get; set; }

        [Newtonsoft.Json.JsonProperty("CECListingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CECListingDate CECListingDate { get; set; }

        [Newtonsoft.Json.JsonProperty("RevenueGrade", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RevenueGrade RevenueGrade { get; set; }

    }

    /// <summary>
    /// Description of the style of the inverter which can be Central, String, or MicroInverter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterStyle : TaxonomyElementString
    {

    }

    /// <summary>
    /// Wire in a PV system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdWire : Product
    {
        [Newtonsoft.Json.JsonProperty("WireType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WireType WireType { get; set; }

        [Newtonsoft.Json.JsonProperty("WireGauge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WireGauge WireGauge { get; set; }

    }

    /// <summary>
    /// The type of wire or cable.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WireType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Describes the grounding of the inverter, can be Grounded or Transformerless
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Grounding : TaxonomyElementString
    {

    }

    /// <summary>
    /// A UUID for identifying a specific array
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVArrayID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A surface of a roof at a single orientation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoofPlane
    {
        [Newtonsoft.Json.JsonProperty("RoofPlaneID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoofPlaneID RoofPlaneID { get; set; }

        [Newtonsoft.Json.JsonProperty("RoofMaterial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoofMaterial RoofMaterial { get; set; }

        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Orientation Orientation { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoofPlanes : global::System.Collections.Generic.List<RoofPlane>
    {
    
            public RoofPlanes() : base() { }        
            public RoofPlanes(IEnumerable<RoofPlane> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Capacity in AC at nominal conditions. Equal to rated capacity for a single inverter, or sum of inverter rated capacities for a PV system. Nominal conditions for an inverter are continuous output at unity power factor.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapacityAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Date, source and content of a comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Comment
    {
        [Newtonsoft.Json.JsonProperty("CommentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentID CommentID { get; set; }

        [Newtonsoft.Json.JsonProperty("CommentDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentDate CommentDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CommentText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentText CommentText { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The UUID of a comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date of a comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Content text of a comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentText : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Comments : global::System.Collections.Generic.List<Comment>
    {
    
            public Comments() : base() { }        
            public Comments(IEnumerable<Comment> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A DC-DC power optimizer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdOptimizer : Product
    {
        [Newtonsoft.Json.JsonProperty("DCOutput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DCOutput DCOutput { get; set; }

        [Newtonsoft.Json.JsonProperty("DCInput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DCInput DCInput { get; set; }

        [Newtonsoft.Json.JsonProperty("OptimizerEfficiencyMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OptimizerEfficiencyMax OptimizerEfficiencyMax { get; set; }

        [Newtonsoft.Json.JsonProperty("OptimizerEfficiencyWeighted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OptimizerEfficiencyWeighted OptimizerEfficiencyWeighted { get; set; }

        [Newtonsoft.Json.JsonProperty("OptimizerType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OptimizerType OptimizerType { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalHarmonicDistortionCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalHarmonicDistortionCurrent TotalHarmonicDistortionCurrent { get; set; }

        [Newtonsoft.Json.JsonProperty("CompatibleWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompatibleWith CompatibleWith { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSelectiveOptimization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsSelectiveOptimization IsSelectiveOptimization { get; set; }

        [Newtonsoft.Json.JsonProperty("IsVocReducing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsVocReducing IsVocReducing { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowsString", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllowsString AllowsString { get; set; }

        [Newtonsoft.Json.JsonProperty("GeoRegion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoRegion GeoRegion { get; set; }

    }

    /// <summary>
    /// The gauge of a wire or cable.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WireGauge : TaxonomyElementString
    {

    }

    /// <summary>
    /// The orientation of a module, can be Landscape or Portrait
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleOrientation : TaxonomyElementString
    {

    }

    /// <summary>
    /// A tag, keyword or label.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tag : TaxonomyElementString
    {

    }

    /// <summary>
    /// A number defining a length of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Duration : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// (Pmax) at STC
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerMaximum : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Voltage of a photovoltaic device at the maximum power point.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageAtMaximumPower : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Current of a photovoltaic device at the maximum power point.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentAtMaximumPower : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The efficiency of the solar module at standard test condition (STC).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleEfficiency : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The specified range within which a solar panel could overperform its rated power at Standard Test Conditions.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerToleranceMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The nominal operating cell temperature (NOCT) of a solar module.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureNOCT : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The highest temperature in which a product can operate
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureMaximumOperating : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The coldest temperature in which a product can operate
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureMinimumOperating : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The temperature coefficient of power at the maximum power point.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureCoefficientMaximumPower : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The temperature coefficient of voltage at open circuit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureCoefficientOpenCircuitVoltage : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The temperature coefficient of current at short circuit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureCoefficientShortCircuitCurrent : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The temperature coefficient of voltage at maximum power.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureCoefficientMaxPowerVoltage : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The temperature coefficient of current at maximum power.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureCoefficientMaxPowerCurrent : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The maximum voltage that a string of modules can support
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageMaximumSystem : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The series fuse rating (need better description)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FuseSeriesRating : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The mass of the parent object. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mass : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The width of the parent object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Width : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The length of the parent object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Length : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The height of the parent object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The material used in the glazing of a solar module
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GlazingMaterial : TaxonomyElementString
    {

    }

    /// <summary>
    /// The number of cells in a module
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CellCount : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// The number of Junction Box Diodes in a solar module
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JunctionBoxDiodeQuantity : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The maximum certification that the Junction Box has been tested for.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JunctionBoxProtectionCertification : TaxonomyElementString
    {

    }

    /// <summary>
    /// The cross sectional area of the cable connecting from the solar module
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CableCrossSectionArea : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The length of the connection cable to the solar module
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CableLength : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The type of cable connector used on the solar module
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CableConnector : TaxonomyElementString
    {

    }

    /// <summary>
    /// The weight of the parent object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The specified range within which a solar panel could underperform its rated power at Standard Test Conditions.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerToleranceMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A solar module product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdModule : Product
    {
        [Newtonsoft.Json.JsonProperty("ModuleEfficiency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleEfficiency ModuleEfficiency { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerToleranceMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerToleranceMax PowerToleranceMax { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureNOCT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureNOCT TemperatureNOCT { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureMaximumOperating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureMaximumOperating TemperatureMaximumOperating { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureMinimumOperating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureMinimumOperating TemperatureMinimumOperating { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureCoefficientMaximumPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureCoefficientMaximumPower TemperatureCoefficientMaximumPower { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureCoefficientOpenCircuitVoltage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureCoefficientOpenCircuitVoltage TemperatureCoefficientOpenCircuitVoltage { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureCoefficientShortCircuitCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureCoefficientShortCircuitCurrent TemperatureCoefficientShortCircuitCurrent { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageMaximumSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageMaximumSystem VoltageMaximumSystem { get; set; }

        [Newtonsoft.Json.JsonProperty("FuseSeriesRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FuseSeriesRating FuseSeriesRating { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCell", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCell ProdCell { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCode ProdCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdDatasheet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdDatasheet ProdDatasheet { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdGlazing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdGlazing ProdGlazing { get; set; }

        [Newtonsoft.Json.JsonProperty("JunctionBoxProtectionCertification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JunctionBoxProtectionCertification JunctionBoxProtectionCertification { get; set; }

        [Newtonsoft.Json.JsonProperty("CableCrossSectionArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CableCrossSectionArea CableCrossSectionArea { get; set; }

        [Newtonsoft.Json.JsonProperty("CableLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CableLength CableLength { get; set; }

        [Newtonsoft.Json.JsonProperty("CableConnector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CableConnector CableConnector { get; set; }

        [Newtonsoft.Json.JsonProperty("Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Dimension { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerToleranceMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerToleranceMin PowerToleranceMin { get; set; }

        [Newtonsoft.Json.JsonProperty("IsBifacial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsBifacial IsBifacial { get; set; }

        [Newtonsoft.Json.JsonProperty("BypassDiodeQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BypassDiodeQuantity BypassDiodeQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("CellsInSeries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CellsInSeries CellsInSeries { get; set; }

        [Newtonsoft.Json.JsonProperty("BacksheetColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BacksheetColor BacksheetColor { get; set; }

        [Newtonsoft.Json.JsonProperty("BacksheetMaterial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BacksheetMaterial BacksheetMaterial { get; set; }

        [Newtonsoft.Json.JsonProperty("CellCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CellCount CellCount { get; set; }

        [Newtonsoft.Json.JsonProperty("CellStringsParallelQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CellStringsParallelQuantity CellStringsParallelQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("FrameColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrameColor FrameColor { get; set; }

        [Newtonsoft.Json.JsonProperty("FrameMaterialType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrameMaterialType FrameMaterialType { get; set; }

        [Newtonsoft.Json.JsonProperty("ModuleBusbarDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleBusbarDescription ModuleBusbarDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("ShadeResponse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShadeResponse ShadeResponse { get; set; }

        [Newtonsoft.Json.JsonProperty("Warranties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Warranties Warranties { get; set; }

        [Newtonsoft.Json.JsonProperty("CECNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CECNotes CECNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerSTC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerSTC PowerSTC { get; set; }

        [Newtonsoft.Json.JsonProperty("ModuleElectRatings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleElectRatings ModuleElectRatings { get; set; }

        [Newtonsoft.Json.JsonProperty("IsBIPV", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsBIPV IsBIPV { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureCoefficientMaxPowerCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureCoefficientMaxPowerCurrent TemperatureCoefficientMaxPowerCurrent { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureCoefficientMaxPowerVoltage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureCoefficientMaxPowerVoltage TemperatureCoefficientMaxPowerVoltage { get; set; }

        [Newtonsoft.Json.JsonProperty("CECListingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CECListingDate CECListingDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ModuleArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleArea ModuleArea { get; set; }

    }

    /// <summary>
    /// A subcomponent of a ProdModule
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdCell : Product
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCode ProdCode { get; set; }

        [Newtonsoft.Json.JsonProperty("CellColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CellColor CellColor { get; set; }

        [Newtonsoft.Json.JsonProperty("CellCutType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CellCutType CellCutType { get; set; }

        [Newtonsoft.Json.JsonProperty("CellTechnologyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CellTechnologyType CellTechnologyType { get; set; }

    }

    /// <summary>
    /// The collection of glass, plastic or other solar cell transparent covers used in crafting a solar module
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdGlazing
    {
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Height Height { get; set; }

        [Newtonsoft.Json.JsonProperty("GlazingMaterial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GlazingMaterial GlazingMaterial { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Dimensions of an object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimension
    {
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Length Length { get; set; }

        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Width Width { get; set; }

        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Height Height { get; set; }

        [Newtonsoft.Json.JsonProperty("Mass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mass Mass { get; set; }

        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight Weight { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// True if a module is bifacial, False otherwise
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsBifacial : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// The number of bypass diodes connected in parallel with cell strings in the module.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BypassDiodeQuantity : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// The number of cells in series in a module.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CellsInSeries : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// The number of parallel-connected strings (a string is a series-connected number of cells).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CellStringsParallelQuantity : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// Elements describing a package
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Package
    {
        [Newtonsoft.Json.JsonProperty("Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Dimension { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Packages : global::System.Collections.Generic.List<Package>
    {
    
            public Packages() : base() { }        
            public Packages(IEnumerable<Package> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tags : global::System.Collections.Generic.List<Tag>
    {
    
            public Tags() : base() { }        
            public Tags(IEnumerable<Tag> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Classification of the Warranty. What type of Warranty is it?
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Universally Unique Identifier for the Warranty
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Human Readable Name for the Warranty
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyName : TaxonomyElementString
    {

    }

    /// <summary>
    /// How long is the Warranty Valid For? 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyDuration : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// Date the Warranty Comes Into Force
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyEffectiveDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date the Warranty Is No Longer in Force
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyExpirationDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Guarantee of minimum quality level
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Warranty
    {
        [Newtonsoft.Json.JsonProperty("WarrantyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyType WarrantyType { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyID WarrantyID { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyName WarrantyName { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyDuration WarrantyDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyEffectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyEffectiveDate WarrantyEffectiveDate { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyExpirationDate WarrantyExpirationDate { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Warranties : global::System.Collections.Generic.List<Warranty>
    {
    
            public Warranties() : base() { }        
            public Warranties(IEnumerable<Warranty> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The date that certification was awarded to product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The expiration date of a certification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationExpirationDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the certification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The document identifier of a certification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateValue : TaxonomyElementString
    {

    }

    /// <summary>
    /// Physical color of the solar cell
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CellColor : TaxonomyElementString
    {

    }

    /// <summary>
    /// Fractional Cell Cut
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CellCutType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Solar cell material type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CellTechnologyType : TaxonomyElementString
    {

    }

    /// <summary>
    /// What Color is the Module backsheet?
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BacksheetColor : TaxonomyElementString
    {

    }

    /// <summary>
    /// What is the Backsheet made of?
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BacksheetMaterial : TaxonomyElementString
    {

    }

    /// <summary>
    /// What Color is the Module Frame?
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FrameColor : TaxonomyElementString
    {

    }

    /// <summary>
    /// The composition of the frame
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FrameMaterialType : TaxonomyElementString
    {

    }

    /// <summary>
    /// How the busbars are arranged in this module
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleBusbarDescription : TaxonomyElementString
    {

    }

    /// <summary>
    /// Description of how the module responds to shading conditions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShadeResponse : TaxonomyElementString
    {

    }

    /// <summary>
    /// CEC-weighted DC/AC conversion efficiency.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterEfficiencyCEC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// DC/AC conversion efficiency determined according to the IEC 61683 standard.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterEfficiencyIEC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Manufacturer's stated maximum DC/AC conversion efficiency
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterEfficiencyMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// DC/AC conversion efficiency at Vmax and specified DC input power
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EfficiencyCECVoltageMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// DC/AC conversion efficiency at Vmin and specified DC input power
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EfficiencyCECVoltageMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// DC/AC conversion efficiency at Vnom and specified DC input power
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EfficiencyCECVoltageNom : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// DC input power for CEC efficiency test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerLevelCECTest : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Measurements of DC/AC conversion efficiency
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterEfficiency
    {
        [Newtonsoft.Json.JsonProperty("InverterEfficiencyCEC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverterEfficiencyCEC InverterEfficiencyCEC { get; set; }

        [Newtonsoft.Json.JsonProperty("InverterEfficiencyIEC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverterEfficiencyIEC InverterEfficiencyIEC { get; set; }

        [Newtonsoft.Json.JsonProperty("InverterEfficiencyMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverterEfficiencyMax InverterEfficiencyMax { get; set; }

        [Newtonsoft.Json.JsonProperty("InverterEfficiencyCECTestResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverterEfficiencyCECTestResults InverterEfficiencyCECTestResults { get; set; }

        [Newtonsoft.Json.JsonProperty("EfficiencyCECWtdVoltageMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfficiencyCECWtdVoltageMax EfficiencyCECWtdVoltageMax { get; set; }

        [Newtonsoft.Json.JsonProperty("EfficiencyCECWtdVoltageMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfficiencyCECWtdVoltageMin EfficiencyCECWtdVoltageMin { get; set; }

        [Newtonsoft.Json.JsonProperty("EfficiencyCECWtdVoltageNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfficiencyCECWtdVoltageNom EfficiencyCECWtdVoltageNom { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterEfficiencyCECTestResults : global::System.Collections.Generic.List<InverterEfficiencyCECTestResult>
    {
    
            public InverterEfficiencyCECTestResults() : base() { }        
            public InverterEfficiencyCECTestResults(IEnumerable<InverterEfficiencyCECTestResult> collection) : base(collection) { }
    
    }

    /// <summary>
    /// CEC measured efficiency values at maximum, nominal and minimum voltage levels and specified input power
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterEfficiencyCECTestResult
    {
        [Newtonsoft.Json.JsonProperty("EfficiencyCECVoltageMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfficiencyCECVoltageMax EfficiencyCECVoltageMax { get; set; }

        [Newtonsoft.Json.JsonProperty("EfficiencyCECVoltageMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfficiencyCECVoltageMin EfficiencyCECVoltageMin { get; set; }

        [Newtonsoft.Json.JsonProperty("EfficiencyCECVoltageNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfficiencyCECVoltageNom EfficiencyCECVoltageNom { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerLevelCECTest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerLevelCECTest PowerLevelCECTest { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Maximum short circuit current of a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentShortCircuitMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum of the voltage range for a MPPT
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageMPPTMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Minimum of the voltage range for a MPPT
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageMPPTMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum DC current of a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentDCMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The number of parallel input strings for a MPPT
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MPPTInputStrings : TaxonomyElementInteger
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MPPTs : global::System.Collections.Generic.List<MPPT>
    {
    
            public MPPTs() : base() { }        
            public MPPTs(IEnumerable<MPPT> collection) : base(collection) { }
    
    }

    /// <summary>
    /// An object of elements to describe a maximum power point tracker (MPPT)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MPPT
    {
        [Newtonsoft.Json.JsonProperty("CurrentShortCircuitMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentShortCircuitMax CurrentShortCircuitMax { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageMPPTMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageMPPTMax VoltageMPPTMax { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageMPPTMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageMPPTMin VoltageMPPTMin { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentDCMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentDCMax CurrentDCMax { get; set; }

        [Newtonsoft.Json.JsonProperty("MPPTInputStrings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MPPTInputStrings MPPTInputStrings { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Maximum AC voltage for a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageACMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Minimum AC voltage for a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageACMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum continuous, real AC power for a device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum AC current of a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentACMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum power factor for a device, expressed as a value between -1 and 1. Power factor is the ratio between real and apparent power. Positive, or lagging, power factor indicates reactive power consumed by the load; negative, or leading, power factor indicates that reactive power is supplied by the load.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerFactorMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Minimum power factor for a device, expressed as a value between -1 and 1. Power factor is the ratio between real and apparent power. Positive, or lagging, power factor indicates reactive power consumed by the load; negative, or leading, power factor indicates that reactive power is supplied by the load.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerFactorMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The number of wires for the output connection of an inverter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InterconnectionLineCount : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// The nominal continuous, real AC power output of a device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACNom : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The nominal AC voltage of a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageACNom : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The time for an inverter to switch from grid-tied to islanded mode
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterSwitchoverTime : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Output (AC) characteristics of an inverter
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterOutput
    {
        [Newtonsoft.Json.JsonProperty("VoltageACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACMax VoltageACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageACMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACMin VoltageACMin { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACMax PowerACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentACMax CurrentACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerFactorMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerFactorMax PowerFactorMax { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerFactorMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerFactorMin PowerFactorMin { get; set; }

        [Newtonsoft.Json.JsonProperty("InterconnectionPhaseType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterconnectionPhaseType InterconnectionPhaseType { get; set; }

        [Newtonsoft.Json.JsonProperty("InterconnectionLineCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterconnectionLineCount InterconnectionLineCount { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACNom PowerACNom { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageACNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACNom VoltageACNom { get; set; }

        [Newtonsoft.Json.JsonProperty("FrequenciesAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrequenciesAC FrequenciesAC { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACSurges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACSurges PowerACSurges { get; set; }

        [Newtonsoft.Json.JsonProperty("InverterSwitchoverTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverterSwitchoverTime InverterSwitchoverTime { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalHarmonicDistortionPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalHarmonicDistortionPower TotalHarmonicDistortionPower { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FrequenciesAC : global::System.Collections.Generic.List<FrequencyAC>
    {
    
            public FrequenciesAC() : base() { }        
            public FrequenciesAC(IEnumerable<FrequencyAC> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACSurges : global::System.Collections.Generic.List<PowerACSurge>
    {
    
            public PowerACSurges() : base() { }        
            public PowerACSurges(IEnumerable<PowerACSurge> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Power (AC) that can be output from an inverter for a specified duration.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACSurge
    {
        [Newtonsoft.Json.JsonProperty("PowerACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACMax PowerACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration Duration { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverterOutputs : global::System.Collections.Generic.List<InverterOutput>
    {
    
            public InverterOutputs() : base() { }        
            public InverterOutputs(IEnumerable<InverterOutput> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Any commercial or legal organization.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entity
    {
        [Newtonsoft.Json.JsonProperty("Addresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses Addresses { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Email Email { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkPhone WorkPhone { get; set; }

        [Newtonsoft.Json.JsonProperty("LegalEntityIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LegalEntityIdentifier LegalEntityIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

        [Newtonsoft.Json.JsonProperty("TaxID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxID TaxID { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditRatings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditRatings CreditRatings { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethods PaymentMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntityRole EntityRole { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Legal Entity Identifier (LEI) of the entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalEntityIdentifier : TaxonomyElementString
    {

    }

    /// <summary>
    /// Tax identification number of the entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Credit rating.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditRating
    {
        [Newtonsoft.Json.JsonProperty("CreditScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditScore CreditScore { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditScoreSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditScoreSource CreditScoreSource { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Credit symbol that indicates the degree of credit worthiness. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditScore : TaxonomyElementString
    {

    }

    /// <summary>
    /// A chemical electrical storage device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdBattery : Product
    {
        [Newtonsoft.Json.JsonProperty("BatteryChemistryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatteryChemistryType BatteryChemistryType { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyCapacityUsable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyCapacityUsable EnergyCapacityUsable { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyCapacityNominal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyCapacityNominal EnergyCapacityNominal { get; set; }

        [Newtonsoft.Json.JsonProperty("DepthOfDischargeMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepthOfDischargeMax DepthOfDischargeMax { get; set; }

        [Newtonsoft.Json.JsonProperty("AltitudeInstallationMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AltitudeInstallationMax AltitudeInstallationMax { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureMinimumOperating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureMinimumOperating TemperatureMinimumOperating { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureMaximumOperating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureMaximumOperating TemperatureMaximumOperating { get; set; }

        [Newtonsoft.Json.JsonProperty("CommunicationProtocol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationProtocol CommunicationProtocol { get; set; }

        [Newtonsoft.Json.JsonProperty("DCInput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DCInput DCInput { get; set; }

        [Newtonsoft.Json.JsonProperty("DCOutput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DCOutput DCOutput { get; set; }

        [Newtonsoft.Json.JsonProperty("EfficiencyBatteryRoundTrip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfficiencyBatteryRoundTrip EfficiencyBatteryRoundTrip { get; set; }

    }

    /// <summary>
    /// The type of chemistry used in the battery
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatteryChemistryType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Issuing source of a credit score, such as a Rating Agency. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditScoreSource : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditRatings : global::System.Collections.Generic.List<CreditRating>
    {
    
            public CreditRatings() : base() { }        
            public CreditRatings(IEnumerable<CreditRating> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A electric service provider
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Utility : Entity
    {
        [Newtonsoft.Json.JsonProperty("UtilityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UtilityName UtilityName { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeStructures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeStructures FeeStructures { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Addresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses Addresses { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

    }

    /// <summary>
    /// Services or function provided by this entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityRole : TaxonomyElementString
    {

    }

    /// <summary>
    /// Usable energy of battery unit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyCapacityUsable : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The nominal capacity of a storage device. Normally calculated by the manufacturer at a specified rate of discharge. (See manufacturer's data sheet for more details - this is not a standardized practice as of June 2023.)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyCapacityNominal : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum Depth of Discharge without damaging battery hardware
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DepthOfDischargeMax : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityRoles : global::System.Collections.Generic.List<EntityRole>
    {
    
            public EntityRoles() : base() { }        
            public EntityRoles(IEnumerable<EntityRole> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Contractor that does installation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Installer : Entity
    {
        [Newtonsoft.Json.JsonProperty("InstallerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstallerName InstallerName { get; set; }

    }

    /// <summary>
    /// Entity that originates a project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Originator : Entity
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entities : global::System.Collections.Generic.List<Entity>
    {
    
            public Entities() : base() { }        
            public Entities(IEnumerable<Entity> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Maximum rated altitude
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AltitudeInstallationMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Micro-grid communication protocol
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommunicationProtocol : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Jobs : global::System.Collections.Generic.List<Job>
    {
    
            public Jobs() : base() { }        
            public Jobs(IEnumerable<Job> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Binding agreement between at least two parties
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contract
    {
        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Signatories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Signatories Signatories { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EffectiveDate EffectiveDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpirationDate ExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Preparer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Preparer Preparer { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractPriceAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractPriceAmount ContractPriceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("Stipulations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stipulations Stipulations { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractID ContractID { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("Warranties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Warranties Warranties { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractType ContractType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Date of the Signature
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SignatureDate : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Signatories : global::System.Collections.Generic.List<Signatory>
    {
    
            public Signatories() : base() { }        
            public Signatories(IEnumerable<Signatory> collection) : base(collection) { }
    
    }

    /// <summary>
    /// That a thing become effective
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EffectiveDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The Date after which a thing is no long in effect
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpirationDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Condition of Contract Enforceability 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stipulation
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("StipulationStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StipulationStatus StipulationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("StipulationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StipulationType StipulationType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of stipulation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StipulationType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Status of stipulation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StipulationStatus : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stipulations : global::System.Collections.Generic.List<Stipulation>
    {
    
            public Stipulations() : base() { }        
            public Stipulations(IEnumerable<Stipulation> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Total cash price of the contract
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractPriceAmount : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contracts : global::System.Collections.Generic.List<Contract>
    {
    
            public Contracts() : base() { }        
            public Contracts(IEnumerable<Contract> collection) : base(collection) { }
    
    }

    /// <summary>
    /// DC inputs to a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DCInput
    {
        [Newtonsoft.Json.JsonProperty("VoltageDCMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCMax VoltageDCMax { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageDCMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCMin VoltageDCMin { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageDCNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCNom VoltageDCNom { get; set; }

        [Newtonsoft.Json.JsonProperty("MPPTNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MPPTNumber MPPTNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerDCContinuousMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerDCContinuousMax PowerDCContinuousMax { get; set; }

        [Newtonsoft.Json.JsonProperty("MPPTs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MPPTs MPPTs { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Maximum DC Voltage
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDCMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Minimum DC Voltage
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDCMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Nominal DC Voltage
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDCNom : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Number of MPPTs on a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MPPTNumber : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// Maximum continuous DC power.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerDCContinuousMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Voltage (DC) input required for an inverter to begin power conversion
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDCInverterStart : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// DC outputs from a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DCOutput
    {
        [Newtonsoft.Json.JsonProperty("VoltageDCMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCMax VoltageDCMax { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageDCMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCMin VoltageDCMin { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageDCNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCNom VoltageDCNom { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerDCContinuousMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerDCContinuousMax PowerDCContinuousMax { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentDCMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentDCMax CurrentDCMax { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerDCMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerDCMax PowerDCMax { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerDCPeaks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerDCPeaks PowerDCPeaks { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// AC inputs to a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ACInput
    {
        [Newtonsoft.Json.JsonProperty("VoltageACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACMax VoltageACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageACMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACMin VoltageACMin { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageACNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACNom VoltageACNom { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentACMax CurrentACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("FrequenciesAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrequenciesAC FrequenciesAC { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// AC outputs from a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ACOutput
    {
        [Newtonsoft.Json.JsonProperty("VoltageACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACMax VoltageACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageACMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACMin VoltageACMin { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageACNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageACNom VoltageACNom { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerFactorMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerFactorMax PowerFactorMax { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerFactorMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerFactorMin PowerFactorMin { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACMax PowerACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACNom PowerACNom { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentACMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentACMax CurrentACMax { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACApparentMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACApparentMax PowerACApparentMax { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACApparentNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACApparentNom PowerACApparentNom { get; set; }

        [Newtonsoft.Json.JsonProperty("InterconnectionLineCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterconnectionLineCount InterconnectionLineCount { get; set; }

        [Newtonsoft.Json.JsonProperty("InterconnectionPhase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterconnectionPhase InterconnectionPhase { get; set; }

        [Newtonsoft.Json.JsonProperty("InterconnectionPhaseType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterconnectionPhaseType InterconnectionPhaseType { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACSurges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACSurges PowerACSurges { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentACNom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentACNom CurrentACNom { get; set; }

        [Newtonsoft.Json.JsonProperty("FrequenciesAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrequenciesAC FrequenciesAC { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Maximum apparent AC power
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACApparentMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Nominal apparent AC power
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACApparentNom : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Nominal AC current
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentACNom : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ACOutputs : global::System.Collections.Generic.List<ACOutput>
    {
    
            public ACOutputs() : base() { }        
            public ACOutputs(IEnumerable<ACOutput> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Frequency (Hz) of a AC power device or system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FrequencyAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum DC power at a moment in time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerDCMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Peak DC power over an interval of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerDCPeak
    {
        [Newtonsoft.Json.JsonProperty("PowerDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerDC PowerDC { get; set; }

        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration Duration { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerDCPeaks : global::System.Collections.Generic.List<PowerDCPeak>
    {
    
            public PowerDCPeaks() : base() { }        
            public PowerDCPeaks(IEnumerable<PowerDCPeak> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The total harmonic distortion (THD) of the power of an inverter, defined as the ratio of the sum of power of all harmonics to the power of the fundamental frequency.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalHarmonicDistortionPower : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The total harmonic distortion (THD) of the power of an inverter, defined as the ratio of the sum of current in all harmonics to the current in the fundamental frequency.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalHarmonicDistortionCurrent : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Maximum efficiency of a DC-DC optimizer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OptimizerEfficiencyMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Weighted efficiency of a DC-DC optimizer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OptimizerEfficiencyWeighted : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// An overall contract with a Site owner
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Job
    {
        [Newtonsoft.Json.JsonProperty("BillOfServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfServices BillOfServices { get; set; }

        [Newtonsoft.Json.JsonProperty("Entities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entities Entities { get; set; }

        [Newtonsoft.Json.JsonProperty("Tasks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tasks Tasks { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("ProjectedSavingsAmt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectedSavingsAmt ProjectedSavingsAmt { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contracts Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("JobPriceAmt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobPriceAmt JobPriceAmt { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("JobID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobID JobID { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemIDs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemIDs SystemIDs { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfMaterials BillOfMaterials { get; set; }

        [Newtonsoft.Json.JsonProperty("JobStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobStatus JobStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntries TimeEntries { get; set; }

        [Newtonsoft.Json.JsonProperty("SolarAPPJobType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SolarAPPJobType SolarAPPJobType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The total price of a job
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobPriceAmt : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// UUID for a contract
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A collection of projects.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Portfolio
    {
        [Newtonsoft.Json.JsonProperty("Projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Projects Projects { get; set; }

        [Newtonsoft.Json.JsonProperty("Entities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entities Entities { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contracts Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("PortfolioID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PortfolioID PortfolioID { get; set; }

        [Newtonsoft.Json.JsonProperty("PortfolioName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PortfolioName PortfolioName { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A logical unit of work that may include more than one site.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Project
    {
        [Newtonsoft.Json.JsonProperty("ProjectID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectID ProjectID { get; set; }

        [Newtonsoft.Json.JsonProperty("ProjectName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectName ProjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contracts Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Entities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entities Entities { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Sites", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sites Sites { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Projects : global::System.Collections.Generic.List<Project>
    {
    
            public Projects() : base() { }        
            public Projects(IEnumerable<Project> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A UUID for a portfolio.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortfolioID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A UUID for a project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of a portfolio
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortfolioName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A name for a project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sites : global::System.Collections.Generic.List<Site>
    {
    
            public Sites() : base() { }        
            public Sites(IEnumerable<Site> collection) : base(collection) { }
    
    }

    /// <summary>
    /// System that includes batteries, overcurrent protection, a disconnect, an enclosure, and optionally an inverter if it's AC-coupled.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdEnergyStorageSystem : Product
    {
        [Newtonsoft.Json.JsonProperty("ACInput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ACInput ACInput { get; set; }

        [Newtonsoft.Json.JsonProperty("ACOutputs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ACOutputs ACOutputs { get; set; }

        [Newtonsoft.Json.JsonProperty("DCInput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DCInput DCInput { get; set; }

        [Newtonsoft.Json.JsonProperty("DCOutput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DCOutput DCOutput { get; set; }

        [Newtonsoft.Json.JsonProperty("AltitudeInstallationMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AltitudeInstallationMax AltitudeInstallationMax { get; set; }

        [Newtonsoft.Json.JsonProperty("BatteryChemistryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatteryChemistryType BatteryChemistryType { get; set; }

        [Newtonsoft.Json.JsonProperty("CommunicationProtocol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationProtocol CommunicationProtocol { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyCapacityNominal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyCapacityNominal EnergyCapacityNominal { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyCapacityUsable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyCapacityUsable EnergyCapacityUsable { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureMaximumOperating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureMaximumOperating TemperatureMaximumOperating { get; set; }

        [Newtonsoft.Json.JsonProperty("TemperatureMinimumOperating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemperatureMinimumOperating TemperatureMinimumOperating { get; set; }

        [Newtonsoft.Json.JsonProperty("GridInterfaceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridInterfaceType GridInterfaceType { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPVInputCapable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsPVInputCapable IsPVInputCapable { get; set; }

        [Newtonsoft.Json.JsonProperty("EfficiencyBatteryRoundTrip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfficiencyBatteryRoundTrip EfficiencyBatteryRoundTrip { get; set; }

    }

    /// <summary>
    /// The optimization method used by the optimizer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OptimizerType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Firmware version 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirmwareVersion : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date that CEC listed the product with the certification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CECListingDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// A list of sections covered by the certification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationTypeSections : TaxonomyElementString
    {

    }

    /// <summary>
    /// An object that describes the key, type and supporting information related to employing Checksums to manage data accuracy. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Checksum
    {
        [Newtonsoft.Json.JsonProperty("ChecksumKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecksumKey ChecksumKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ChecksumType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecksumType ChecksumType { get; set; }

        [Newtonsoft.Json.JsonProperty("ChecksumDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecksumDetail ChecksumDetail { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibleWith : global::System.Collections.Generic.List<ProdName>
    {
    
            public CompatibleWith() : base() { }        
            public CompatibleWith(IEnumerable<ProdName> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Does this optimizer allow more than one module in series to be connected to an input
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllowsString : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Date at which firmware or software update was applied. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppliedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Permanent software programmed into a read-only memory.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Firmware
    {
        [Newtonsoft.Json.JsonProperty("FirmwareVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FirmwareVersion FirmwareVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("Checksum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Checksum Checksum { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirmwareVersions : global::System.Collections.Generic.List<Firmware>
    {
    
            public FirmwareVersions() : base() { }        
            public FirmwareVersions(IEnumerable<Firmware> collection) : base(collection) { }
    
    }

    /// <summary>
    /// True if inverter is capable of taking DC power input from a PV system and an energy storage system. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsHybrid : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// True if the optimizer can modify the attached module's apparent Voc to allow for longer strings.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsVocReducing : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Additional identifier for a record or data set
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlternativeIdentifier
    {
        [Newtonsoft.Json.JsonProperty("SourceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceName SourceName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentifierType IdentifierType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlternativeIdentifiers : global::System.Collections.Generic.List<AlternativeIdentifier>
    {
    
            public AlternativeIdentifiers() : base() { }        
            public AlternativeIdentifiers(IEnumerable<AlternativeIdentifier> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A unique identifier for a record or dataset.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identifier : TaxonomyElementString
    {

    }

    /// <summary>
    /// Notes from California Energy Commission (CEC) equipment list.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CECNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// This optimizer allows some modules on a string to have optimizers while others don't
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsSelectiveOptimization : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Product contains a built in metering device. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HasMeter : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Region this component is designed for use in
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoRegion : TaxonomyElementString
    {

    }

    /// <summary>
    /// Power consumed by an inverter with no DC input. Also referred to as internal consumption.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NightTare : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Weighted DC/AC conversion efficiency at Vmax. Weighting according to CEC specification. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EfficiencyCECWtdVoltageMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Weighted DC/AC conversion efficiency at Vmin. Weighted based on CEC specifications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EfficiencyCECWtdVoltageMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Weighted DC/AC conversion efficiency at Vnom. Weighted based on CEC specifications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EfficiencyCECWtdVoltageNom : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Name of the data source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SourceName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A device used to measure generated and/or consumed energy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdMeter : Product
    {
        [Newtonsoft.Json.JsonProperty("CECNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CECNotes CECNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("CECListingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CECListingDate CECListingDate { get; set; }

        [Newtonsoft.Json.JsonProperty("AccuracyClassANSI", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccuracyClassANSI AccuracyClassANSI { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayDescription DisplayDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("CECPBIMeter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CECPBIMeter CECPBIMeter { get; set; }

        [Newtonsoft.Json.JsonProperty("CommunicationProtocol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationProtocol CommunicationProtocol { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayProximity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProximity DisplayProximity { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayIsCECCompliant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayIsCECCompliant DisplayIsCECCompliant { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayTypes DisplayTypes { get; set; }

    }

    /// <summary>
    /// Energy measurement accuracy, as defined by ANSI C12.20. The value is percent over or under the exact measurement. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccuracyClassANSI : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Type of display on a device. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayDescription : TaxonomyElementString
    {

    }

    /// <summary>
    /// The area of a PV module inside the frame. Equal to total module area for a frameless module.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleArea : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// True if the PV module is intended for a building-integrated PV system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsBIPV : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// A condition at which a module electrical rating is determined.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleRatingCondition : TaxonomyElementString
    {

    }

    /// <summary>
    /// DC power at Standard Test Condition (STC). STC is defined as 1000 W/m2 irradiance, 25C and ASTM G173-03 standard solar spectrum.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerSTC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Data describing the module characteristics at a specific rating condition.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleElectRating
    {
        [Newtonsoft.Json.JsonProperty("PowerDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerDC PowerDC { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageOpenCircuit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageOpenCircuit VoltageOpenCircuit { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageAtMaximumPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageAtMaximumPower VoltageAtMaximumPower { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentShortCircuit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentShortCircuit CurrentShortCircuit { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentAtMaximumPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentAtMaximumPower CurrentAtMaximumPower { get; set; }

        [Newtonsoft.Json.JsonProperty("ModuleRatingCondition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleRatingCondition ModuleRatingCondition { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleElectRatings : global::System.Collections.Generic.List<ModuleElectRating>
    {
    
            public ModuleElectRatings() : base() { }        
            public ModuleElectRatings(IEnumerable<ModuleElectRating> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Generic abstract base class for generation/storage systems.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class System
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationalStatus OperationalStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationalPhase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationalPhase OperationalPhase { get; set; }

        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Devices Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfMaterials BillOfMaterials { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemID SystemID { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemPrice SystemPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemType SystemType { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfServices BillOfServices { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomElements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomElements CustomElements { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemState SystemState { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemStage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemStage SystemStage { get; set; }

        [Newtonsoft.Json.JsonProperty("PermissionToOperateDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionToOperateDate PermissionToOperateDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CommissionDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommissionDate CommissionDate { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Generic identifier of a system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Description of how the device interacts with the grid
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GridInterfaceType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Price of a generic system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemPrice : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Is this device capable of accepting PV input natively (without seperate charge controller)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsPVInputCapable : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// A solar photovoltaic system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVSystem : System
    {
        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("StructureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StructureID StructureID { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricalServiceID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricalServiceID ElectricalServiceID { get; set; }

        [Newtonsoft.Json.JsonProperty("RiskCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RiskCategory RiskCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("PVArrays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVArrays PVArrays { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityAC CapacityAC { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModels EnergyModels { get; set; }

        [Newtonsoft.Json.JsonProperty("Production", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Production Production { get; set; }

    }

    /// <summary>
    /// A battery system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatterySystem : System
    {
        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricalServiceID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricalServiceID ElectricalServiceID { get; set; }

        [Newtonsoft.Json.JsonProperty("StructureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StructureID StructureID { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyConsumptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyConsumptions EnergyConsumptions { get; set; }

    }

    /// <summary>
    /// Type of system referenced by base abstract class System.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Percent of energy retained during full charge/discharge cycle
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EfficiencyBatteryRoundTrip : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The name of the installer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallerName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACArray : global::System.Collections.Generic.List<EnergyAC>
    {
    
            public EnergyACArray() : base() { }        
            public EnergyACArray(IEnumerable<EnergyAC> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A name for a forecast
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForecastName : TaxonomyElementString
    {

    }

    /// <summary>
    /// An identifier for a forecast
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForecastID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The time at which a forecast is made.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForecastIssueTime : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempAmbArray : global::System.Collections.Generic.List<TempAmb>
    {
    
            public TempAmbArray() : base() { }        
            public TempAmbArray(IEnumerable<TempAmb> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACArray : global::System.Collections.Generic.List<PowerAC>
    {
    
            public PowerACArray() : base() { }        
            public PowerACArray(IEnumerable<PowerAC> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The source of a forecast
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForecastSource : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradGlobalHorizArray : global::System.Collections.Generic.List<IrradGlobalHorizontal>
    {
    
            public IrradGlobalHorizArray() : base() { }        
            public IrradGlobalHorizArray(IEnumerable<IrradGlobalHorizontal> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempModuleArray : global::System.Collections.Generic.List<TempModule>
    {
    
            public TempModuleArray() : base() { }        
            public TempModuleArray(IEnumerable<TempModule> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradPlaneOfArrayArray : global::System.Collections.Generic.List<IrradPlaneOfArray>
    {
    
            public IrradPlaneOfArrayArray() : base() { }        
            public IrradPlaneOfArrayArray(IEnumerable<IrradPlaneOfArray> collection) : base(collection) { }
    
    }

    /// <summary>
    /// An object containing data for a forecast.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Forecast
    {
        [Newtonsoft.Json.JsonProperty("ForecastID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForecastID ForecastID { get; set; }

        [Newtonsoft.Json.JsonProperty("ForecastIssueTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForecastIssueTime ForecastIssueTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ForecastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForecastName ForecastName { get; set; }

        [Newtonsoft.Json.JsonProperty("ForecastSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForecastSource ForecastSource { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradGlobalHorizArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradGlobalHorizArray IrradGlobalHorizArray { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArrayArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArrayArray IrradPlaneOfArrayArray { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACArray PowerACArray { get; set; }

        [Newtonsoft.Json.JsonProperty("TempAmbArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmbArray TempAmbArray { get; set; }

        [Newtonsoft.Json.JsonProperty("TempModuleArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempModuleArray TempModuleArray { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A generic object containing information describing where the aforementioned data applies to. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Scope
    {
        [Newtonsoft.Json.JsonProperty("ScopeID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScopeID ScopeID { get; set; }

        [Newtonsoft.Json.JsonProperty("ScopeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScopeType ScopeType { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An identifier for the device, system, portfolio, region, etc.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScopeID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The scope where data applies.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScopeType : TaxonomyElementString
    {

    }

    /// <summary>
    /// An object containing data for measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Measurement
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An object containing Energy AC measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

    }

    /// <summary>
    /// Object containing VoltageDC measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDCMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("VoltageDCArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCArray VoltageDCArray { get; set; }

    }

    /// <summary>
    /// An object containing Irradiance Global Horizontal (IrradGlobalHoriz) measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradGlobalHorizMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("IrradGlobalHorizArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradGlobalHorizArray IrradGlobalHorizArray { get; set; }

    }

    /// <summary>
    /// An object containing PowerAC measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("PowerACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACArray PowerACArray { get; set; }

    }

    /// <summary>
    /// An object containing Ambient Temperature (TempAmb) measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempAmbMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("TempAmbArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmbArray TempAmbArray { get; set; }

    }

    /// <summary>
    /// Universally unique identifier for the job.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Code defining jurisdictional level of an Authority Having Jurisdiction.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AHJLevelCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// The 50th percentile of annual AC energy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACAnnualP50 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The 90th percentile of annual AC energy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACAnnualP90 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Inputs to an energy model.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelInput
    {
        [Newtonsoft.Json.JsonProperty("ModelWeatherSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelWeatherSource ModelWeatherSource { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityAC CapacityAC { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradTranspositionModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradTranspositionModel IrradTranspositionModel { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Output from an energy model.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelOutput
    {
        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACAnnualP50", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACAnnualP50 EnergyACAnnualP50 { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACAnnualP90", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACAnnualP90 EnergyACAnnualP90 { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACArray PowerACArray { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACAnnual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACAnnual EnergyACAnnual { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACModeled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACModeled EnergyACModeled { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The identifier of the delegated AHJ that has the authority to issue permits for PV and Battery Systems within this jurisdiction.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DelegatesToAHJID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Description of special cases applicable to the element. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExceptionDescription : TaxonomyElementString
    {

    }

    /// <summary>
    /// The date and time associated with the energy model run.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelRunDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The model used to transpose from global horizontal irradiance (GHI) to plane-of-array (POA) irradiance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradTranspositionModel : TaxonomyElementString
    {

    }

    /// <summary>
    /// The total annual AC energy for a PV system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACAnnual : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModels : global::System.Collections.Generic.List<EnergyModel>
    {
    
            public EnergyModels() : base() { }        
            public EnergyModels(IEnumerable<EnergyModel> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The maximum limit payable, per licensee, for damages arising from the same or a related claim.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerClaimAmount : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The maximum amount of money the insurer will pay for all of your losses during a policy period.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateAmount : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The amount of money that the insured is responsible for paying toward an insured loss.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeductibleAmount : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A unique identifier for a specific InsurancePolicy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsurancePolicyID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Method or product that transfers risk between entities.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskTransferType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Specific instance of an insurance policy with beneficiary, supplier and purchaser.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsurancePolicy
    {
        [Newtonsoft.Json.JsonProperty("AggregateAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AggregateAmount AggregateAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("PerClaimAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerClaimAmount PerClaimAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("InsurancePolicyID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsurancePolicyID InsurancePolicyID { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpirationDate ExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("RiskTransferType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RiskTransferType RiskTransferType { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DeductibleAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeductibleAmount DeductibleAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("InsuranceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsuranceType InsuranceType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about a being who signs the contract
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Signatory : Entity
    {
        [Newtonsoft.Json.JsonProperty("SignatureDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignatureDate SignatureDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("SigningFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SigningFor SigningFor { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntityRole EntityRole { get; set; }

    }

    /// <summary>
    /// Entity who prepared the legal documents
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Preparer : Entity
    {
        [Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("PreparerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreparerName PreparerName { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntityRole EntityRole { get; set; }

    }

    /// <summary>
    /// Name of preparer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreparerName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Entity that has signed on behalf of the concerned parties
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SigningFor : TaxonomyElementString
    {

    }

    /// <summary>
    /// A collection of electrical and related measurements with a common scope.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Production
    {
        [Newtonsoft.Json.JsonProperty("EnergyACMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACMeas EnergyACMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradGlobalHorizMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradGlobalHorizMeas IrradGlobalHorizMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACMeas PowerACMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("TempAmbMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmbMeas TempAmbMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageDCMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCMeas VoltageDCMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArrayMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArrayMeas IrradPlaneOfArrayMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Bill of Materials
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfMaterials
    {
        [Newtonsoft.Json.JsonProperty("ProdLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdLineItems ProdLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfMaterialsStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfMaterialsStatus BillOfMaterialsStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Measurements of plane-of-array (POA) irradiance
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradPlaneOfArrayMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArrayArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArrayArray IrradPlaneOfArrayArray { get; set; }

    }

    /// <summary>
    /// Describes PV system output and related quantities for a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperatingReport
    {
        [Newtonsoft.Json.JsonProperty("Production", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Production Production { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("PerformanceRatios", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerformanceRatios PerformanceRatios { get; set; }

        [Newtonsoft.Json.JsonProperty("RevenueAccrued", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RevenueAccrued RevenueAccrued { get; set; }

        [Newtonsoft.Json.JsonProperty("RevenueForecasted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RevenueForecasted RevenueForecasted { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpensesOperating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpensesOperating ExpensesOperating { get; set; }

        [Newtonsoft.Json.JsonProperty("Insolation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Insolation Insolation { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyAC EnergyAC { get; set; }

        [Newtonsoft.Json.JsonProperty("AccountBalances", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountBalances AccountBalances { get; set; }

        [Newtonsoft.Json.JsonProperty("AgingBuckets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgingBuckets AgingBuckets { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("OperatingReportID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperatingReportID OperatingReportID { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpectedEnergyModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpectedEnergyModel ExpectedEnergyModel { get; set; }

        [Newtonsoft.Json.JsonProperty("ForecastEnergyModels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForecastEnergyModels ForecastEnergyModels { get; set; }

        [Newtonsoft.Json.JsonProperty("PerformanceIndexes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerformanceIndexes PerformanceIndexes { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailabilityReport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailabilityReport AvailabilityReport { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomElements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomElements CustomElements { get; set; }

        [Newtonsoft.Json.JsonProperty("SoilingReport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoilingReport SoilingReport { get; set; }

        [Newtonsoft.Json.JsonProperty("LossReport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LossReport LossReport { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemIDs : global::System.Collections.Generic.List<SystemID>
    {
    
            public SystemIDs() : base() { }        
            public SystemIDs(IEnumerable<SystemID> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Modeled AC energy for a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACModeled : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Contains a Performance Ratio (PR) and information supporting the ratio's calculation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceRatio
    {
        [Newtonsoft.Json.JsonProperty("EnergyAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyAC EnergyAC { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACModeled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACModeled EnergyACModeled { get; set; }

        [Newtonsoft.Json.JsonProperty("PerfRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerfRatio PerfRatio { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModelID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelID EnergyModelID { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A performance ratio (PR), which is the ratio of measured AC energy to modeled AC energy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerfRatio : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceRatios : global::System.Collections.Generic.List<PerformanceRatio>
    {
    
            public PerformanceRatios() : base() { }        
            public PerformanceRatios(IEnumerable<PerformanceRatio> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Revenue computed using accrual accounting
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevenueAccrued : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Revenue forecasted or projected using financial and other models.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevenueForecasted : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Generally recurring costs associated with normal operations except for the portion of these expenses which can be clearly related to production and included in cost of sales or services. Includes selling, general and administrative expense.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpensesOperating : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Total solar irradiance on a surface for a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Insolation : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The authority having jurisdiction over any permit, site, or governance decision
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorityHavingJurisdiction : Entity
    {
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("BuildingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildingCode BuildingCode { get; set; }

        [Newtonsoft.Json.JsonProperty("BuildingCodeNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildingCodeNotes BuildingCodeNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricCode ElectricCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricCodeNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricCodeNotes ElectricCodeNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("FireCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FireCode FireCode { get; set; }

        [Newtonsoft.Json.JsonProperty("FireCodeNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FireCodeNotes FireCodeNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("ResidentialCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResidentialCode ResidentialCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ResidentialCodeNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResidentialCodeNotes ResidentialCodeNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("DocumentSubmissionMethodNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentSubmissionMethodNotes DocumentSubmissionMethodNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("EngineeringReviewRequirements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EngineeringReviewRequirements EngineeringReviewRequirements { get; set; }

        [Newtonsoft.Json.JsonProperty("AHJID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AHJID AHJID { get; set; }

        [Newtonsoft.Json.JsonProperty("AHJName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AHJName AHJName { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("WindCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindCode WindCode { get; set; }

        [Newtonsoft.Json.JsonProperty("WindCodeNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindCodeNotes WindCodeNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeStructures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeStructures FeeStructures { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

        [Newtonsoft.Json.JsonProperty("AHJCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AHJCode AHJCode { get; set; }

        [Newtonsoft.Json.JsonProperty("EstimatedTurnaroundDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstimatedTurnaroundDays EstimatedTurnaroundDays { get; set; }

        [Newtonsoft.Json.JsonProperty("AHJInspections", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AHJInspections AHJInspections { get; set; }

        [Newtonsoft.Json.JsonProperty("PermitIssueMethodNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermitIssueMethodNotes PermitIssueMethodNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("PermitIssueMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermitIssueMethods PermitIssueMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("DocumentSubmissionMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentSubmissionMethods DocumentSubmissionMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("AHJLevelCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AHJLevelCode AHJLevelCode { get; set; }

        [Newtonsoft.Json.JsonProperty("DelegatesToAHJID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DelegatesToAHJID DelegatesToAHJID { get; set; }

        [Newtonsoft.Json.JsonProperty("ExceptionDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExceptionDescription ExceptionDescription { get; set; }

    }

    /// <summary>
    /// The Homeowner's Association of a site
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeownersAssociation : Entity
    {
        [Newtonsoft.Json.JsonProperty("HOAName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HOAName HOAName { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeStructures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeStructures FeeStructures { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

    }

    /// <summary>
    /// An identifier for an energy model.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelID : TaxonomyElementString
    {

    }

    /// <summary>
    /// An identifier for an operating report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperatingReportID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Energy from a performance model applied to actual weather.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpectedEnergyModel : EnergyModel
    {

    }

    /// <summary>
    /// Energy from a performance model applied to assumed or forecasted weather.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForecastEnergyModel : EnergyModel
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForecastEnergyModels : global::System.Collections.Generic.List<ForecastEnergyModel>
    {
    
            public ForecastEnergyModels() : base() { }        
            public ForecastEnergyModels(IEnumerable<ForecastEnergyModel> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A person or company that underwrites an insurance risk; the party in an insurance contract undertaking to pay compensation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Insurer : Entity
    {
        [Newtonsoft.Json.JsonProperty("InsurerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsurerName InsurerName { get; set; }

    }

    /// <summary>
    /// Name of Insurer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsurerName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Individual or entity that owns property.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Owner : Entity
    {
        [Newtonsoft.Json.JsonProperty("OwnerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OwnerName OwnerName { get; set; }

    }

    /// <summary>
    /// Minimum range of acceptable input.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerRangeMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Name of the Owner
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnerName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Maximum range of acceptable input.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerRangeMax : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Contains various performance indexes and information supporting these values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceIndex
    {
        [Newtonsoft.Json.JsonProperty("PerformanceIndexEnergy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerformanceIndexEnergy PerformanceIndexEnergy { get; set; }

        [Newtonsoft.Json.JsonProperty("PerformanceIndexPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerformanceIndexPower PerformanceIndexPower { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyAC EnergyAC { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACModeled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACModeled EnergyACModeled { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerAC PowerAC { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModelID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelID EnergyModelID { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACCorrected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACCorrected PowerACCorrected { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACModeled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACModeled PowerACModeled { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerCorrFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerCorrFactor PowerCorrFactor { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The ratio of actual energy to modeled energy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceIndexEnergy : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The ratio of actual AC power to modeled AC power
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceIndexPower : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// AC power determined by a model.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACModeled : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Modeled AC power multiplied by a correction factor to account for the difference between modeled and actual conditions.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACCorrected : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A correction factor that is applied to modeled AC power to account for differences between modeled and actual weather.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerCorrFactor : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceIndexes : global::System.Collections.Generic.List<PerformanceIndex>
    {
    
            public PerformanceIndexes() : base() { }        
            public PerformanceIndexes(IEnumerable<PerformanceIndex> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Unique identifier for the Product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdID : TaxonomyElementString
    {

    }

    /// <summary>
    /// An object containing data describing a time period during which a PV system is capable of operating.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpTime
    {
        [Newtonsoft.Json.JsonProperty("OperationalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationalStatus OperationalStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityFractionAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityFractionAC CapacityFractionAC { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An object containing data describing a time period during which a PV system is not capable of operating.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownTime
    {
        [Newtonsoft.Json.JsonProperty("OperationalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationalStatus OperationalStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityFractionAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityFractionAC CapacityFractionAC { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The document describing the calculation of an availability value
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailabilityStandard : TaxonomyElementString
    {

    }

    /// <summary>
    /// A value from the enumerated list of the possible standards that a product can have.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationStandard : TaxonomyElementString
    {

    }

    /// <summary>
    /// A fraction of nominal AC capacity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapacityFractionAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Total duration of time when a device or system is capable of operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpTimeTotal : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Total duration of time when a device or system is not capable of operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownTimeTotal : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownTimes : global::System.Collections.Generic.List<DownTime>
    {
    
            public DownTimes() : base() { }        
            public DownTimes(IEnumerable<DownTime> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpTimes : global::System.Collections.Generic.List<UpTime>
    {
    
            public UpTimes() : base() { }        
            public UpTimes(IEnumerable<UpTime> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A summary report of availability metrics.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailabilityReport
    {
        [Newtonsoft.Json.JsonProperty("AvailabilityStandard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailabilityStandard AvailabilityStandard { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailCapacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailCapacity AvailCapacity { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailOperational", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailOperational AvailOperational { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailTechnical", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailTechnical AvailTechnical { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyAC EnergyAC { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACModeled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACModeled EnergyACModeled { get; set; }

        [Newtonsoft.Json.JsonProperty("UpTimeTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpTimeTotal UpTimeTotal { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailContractual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailContractual AvailContractual { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailContractualMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailContractualMin AvailContractualMin { get; set; }

        [Newtonsoft.Json.JsonProperty("DownTimeTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DownTimeTotal DownTimeTotal { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomElements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomElements CustomElements { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The fraction of time that a system is operational. Calculated as (up time) / (up time + down time). For operational availability, up time includes the time the device or system is generating power. All other time is down time. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailOperational : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The fraction of time that a device or system is capable of generating power. Calculated as (up time) / (up time + down time). For technical availability, up time includes time that the system is generating power, or could generate power but is outside environmental limits, is subject to grid outage or is directed to be offline. Down time includes time offline for equipment failure and repair.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailTechnical : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Percent of AC capacity available during a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailCapacity : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A product that can serve as a replacement for a given Product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubstituteProduct
    {
        [Newtonsoft.Json.JsonProperty("ProdCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCode ProdCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdID ProdID { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdMfr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdMfr ProdMfr { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdName ProdName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdType ProdType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubstituteProducts : global::System.Collections.Generic.List<SubstituteProduct>
    {
    
            public SubstituteProducts() : base() { }        
            public SubstituteProducts(IEnumerable<SubstituteProduct> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Energy produced from internal sources
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyProduction
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A value that describes the working status of given Job. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// A record of time logged to a given Job.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntry
    {
        [Newtonsoft.Json.JsonProperty("TimeEntryID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntryID TimeEntryID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntryDate TimeEntryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Worker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Worker Worker { get; set; }

        [Newtonsoft.Json.JsonProperty("JobRoleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobRoleName JobRoleName { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntryEndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntryEndTime TimeEntryEndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntryStartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntryStartTime TimeEntryStartTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Unique identifier of this TimeEntry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntryID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date of this TimeEntry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntryDate : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntries : global::System.Collections.Generic.List<TimeEntry>
    {
    
            public TimeEntries() : base() { }        
            public TimeEntries(IEnumerable<TimeEntry> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Individual that provides a service or performs a task.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Worker
    {
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FirstName FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastName LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("HomePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomePhone HomePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("MobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MobilePhone MobilePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkPhone WorkPhone { get; set; }

        [Newtonsoft.Json.JsonProperty("PreferredContactMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferredContactMethod PreferredContactMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Title Title { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Email Email { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactTimezone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactTimezone ContactTimezone { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkerID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerID WorkerID { get; set; }

        [Newtonsoft.Json.JsonProperty("EmploymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentType EmploymentType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A unique identifier for the Laborer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Description of the role an individual is performing on a given Job. This determines their OES wage level in prevailing wage Jobs. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobRoleName : TaxonomyElementString
    {

    }

    /// <summary>
    /// An enumerated list of applicable employment types.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Energy imported from external sources
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyImport
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Energy exported from internal production
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyExport
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parasitic energy consumption by a system's devices.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyParasiticConsumption
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Expected data type of the input for the given CustomElement
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Object the represents custom data elements that are not represented explicitly in the taxonomy. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomElement
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("ElementID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementID ElementID { get; set; }

        [Newtonsoft.Json.JsonProperty("ElementName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementName ElementName { get; set; }

        [Newtonsoft.Json.JsonProperty("ElementValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementValue ElementValue { get; set; }

        [Newtonsoft.Json.JsonProperty("ElementItemType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementItemType ElementItemType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Unique identifier of the CustomElement as represented in the host environment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElementID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of the CustomElement within the host environment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElementName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomElements : global::System.Collections.Generic.List<CustomElement>
    {
    
            public CustomElements() : base() { }        
            public CustomElements(IEnumerable<CustomElement> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The Value of the CustomElement in this instance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElementValue : TaxonomyElementString
    {

    }

    /// <summary>
    /// The Orange Button ItemType that the CustomElement represents in this instance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElementItemType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Availability determined as defined in a contract, which can be assigned to FileFolderURL. Contractual Availability is calculated as (useful time - down time + excluded time) / (useful time) where "useful time" is the time with irradiance above a minimum threshold.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailContractual : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A minimum guaranteed contractual availability.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailContractualMin : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Voltage (DC) measured at an instant in time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDC : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDCArray : global::System.Collections.Generic.List<VoltageDC>
    {
    
            public VoltageDCArray() : base() { }        
            public VoltageDCArray(IEnumerable<VoltageDC> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailabilityReports : global::System.Collections.Generic.List<AvailabilityReport>
    {
    
            public AvailabilityReports() : base() { }        
            public AvailabilityReports(IEnumerable<AvailabilityReport> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Description of the high-level technical elements within a job. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SolarAPPJobType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Value that describes whether a meter qualifies for the California Energy Commission Performance Based Incentive. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CECPBIMeter : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// The location or means by which a display is able to visualize data collected by the product. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayProximity : TaxonomyElementString
    {

    }

    /// <summary>
    /// Describes whether a display meets CEC (California Energy Commission) compliance codes. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayIsCECCompliant : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// An array of DisplayTypes supported by the ProdMeter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayTypes : TaxonomyElementArrayString
    {

    }

    /// <summary>
    /// The token assigned by the payment processor to represent a previously stored payment method. This value should not contain any information that is subject to Payment Card Industry (PCI) compliance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentToken : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of unique identifier used to represent a unique datapoint as the AlternativeIdentifier. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentifierType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The named method of payment(s) at the payment processor that can be used to fund the transaction(s). Used for expenses related to a task, non-payroll related payments and other payments that may not be included in existing contractual payments.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethod
    {
        [Newtonsoft.Json.JsonProperty("PaymentToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentToken PaymentToken { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentMethodName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodName PaymentMethodName { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the account that is meaningful to the person making the payment. This does not need to be unique or meaningful to anyone else. This value is not subject to Payment Card Industry (PCI) compliance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethodName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Universal Product Code (UPC) (technically refers to UPC-A) consists of 12 digits that are uniquely assigned to each trade item. This value is assigned by the manufacturer of the trade item/product. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManufacturerUPC : TaxonomyElementString
    {

    }

    /// <summary>
    /// True if the associated object (project, process, task, etc.) is Cancelled.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsCancelled : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// True if the associated object (project, process, task, etc.) is Paused.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsPaused : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// An enumerated value describing a stage in a process
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stage : TaxonomyElementString
    {

    }

    /// <summary>
    /// State of a system at a moment in time. Used primarily for system availability.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemState : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethods : global::System.Collections.Generic.List<PaymentMethod>
    {
    
            public PaymentMethods() : base() { }        
            public PaymentMethods(IEnumerable<PaymentMethod> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The lifecycle stage of a system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemStage
    {
        [Newtonsoft.Json.JsonProperty("IsCancelled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsCancelled IsCancelled { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPaused", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsPaused IsPaused { get; set; }

        [Newtonsoft.Json.JsonProperty("Stage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage Stage { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ratio of the irradiance measured by a soiled device to the irradiance measured by a clean device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingRatioIrrad : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Ratio of the energy from a soiled device or system to the energy from a clean device or system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingRatioEnergy : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Ratio of the power from a soiling device to the power from a clean device. Termed "soiling ratio" in IEC 61724-1 Ed. 2.0.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingRatioPower : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A group of elements for reporting soiling for irradiance, power or energy
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingReport
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("SoilingRatioEnergyArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoilingRatioEnergyArray SoilingRatioEnergyArray { get; set; }

        [Newtonsoft.Json.JsonProperty("SoilingRatioIrradArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoilingRatioIrradArray SoilingRatioIrradArray { get; set; }

        [Newtonsoft.Json.JsonProperty("SoilingRatioPowerArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoilingRatioPowerArray SoilingRatioPowerArray { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingRatioEnergyArray : global::System.Collections.Generic.List<SoilingRatioEnergy>
    {
    
            public SoilingRatioEnergyArray() : base() { }        
            public SoilingRatioEnergyArray(IEnumerable<SoilingRatioEnergy> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingRatioIrradArray : global::System.Collections.Generic.List<SoilingRatioIrrad>
    {
    
            public SoilingRatioIrradArray() : base() { }        
            public SoilingRatioIrradArray(IEnumerable<SoilingRatioIrrad> collection) : base(collection) { }
    
    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoilingRatioPowerArray : global::System.Collections.Generic.List<SoilingRatioPower>
    {
    
            public SoilingRatioPowerArray() : base() { }        
            public SoilingRatioPowerArray(IEnumerable<SoilingRatioPower> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Energy losses for a period of time. Energy losses should be distinct and non-duplicative, so that EnergyACMeas + Sum of losses = EnergyAC modeled
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LossReport
    {
        [Newtonsoft.Json.JsonProperty("EnergyLosses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyLosses EnergyLosses { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A collection of terms that describe an energy loss for photovoltaic systems.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyLoss
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACLoss", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACLoss EnergyACLoss { get; set; }

        [Newtonsoft.Json.JsonProperty("IsRecoverable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsRecoverable IsRecoverable { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyLossCause", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyLossCause EnergyLossCause { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityFractionAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityFractionAC CapacityFractionAC { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Energy production lost
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACLoss : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyLosses : global::System.Collections.Generic.List<EnergyLoss>
    {
    
            public EnergyLosses() : base() { }        
            public EnergyLosses(IEnumerable<EnergyLoss> collection) : base(collection) { }
    
    }

    /// <summary>
    /// True if energy loss is recoverable by maintenance or other action.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsRecoverable : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Cause of an energy loss
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyLossCause : TaxonomyElementString
    {

    }

    /// <summary>
    /// A unique identifier for a failure record
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A collection of data describing a failure. Failure is the termination of the ability of an item to perform a required function.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureRecord
    {
        [Newtonsoft.Json.JsonProperty("FailureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureID FailureID { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactSafety", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactSafety ImpactSafety { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactCapability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactCapability ImpactCapability { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactProduction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactProduction ImpactProduction { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureCause", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureCause FailureCause { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureOperatingCondition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureOperatingCondition FailureOperatingCondition { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureMechanism", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureMechanism FailureMechanism { get; set; }

        [Newtonsoft.Json.JsonProperty("DetectionMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DetectionMethod DetectionMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureDetectedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureDetectedDate FailureDetectedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureResolvedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureResolvedDate FailureResolvedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureDate FailureDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureResolution FailureResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The impact on safety of an Issue or Failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpactSafety : TaxonomyElementString
    {

    }

    /// <summary>
    /// The impact on production of a Failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpactProduction : TaxonomyElementString
    {

    }

    /// <summary>
    /// The impact on an item's capability of an Issue or Failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpactCapability : TaxonomyElementString
    {

    }

    /// <summary>
    /// The physical, chemical or other process that leads to a failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureMechanism : TaxonomyElementString
    {

    }

    /// <summary>
    /// Circumstances associated with the design, manufacture, installation, use and maintenance that have led to a failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureCause : TaxonomyElementString
    {

    }

    /// <summary>
    /// The operating condition of an item when a failure occurs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureOperatingCondition : TaxonomyElementString
    {

    }

    /// <summary>
    /// Most recent date that a device was maintained.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateMaintLast : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date of an inspection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InspectionDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date that a device is first placed in service.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InServiceDate : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Calibration
    {
        [Newtonsoft.Json.JsonProperty("CalibrationDateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationDateLast CalibrationDateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("CalibrationMeth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationMeth CalibrationMeth { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A collection of Devices that together forms a logical unit or perform a collective function. For example, an PV string is a collection of module Devices.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assembly
    {
        [Newtonsoft.Json.JsonProperty("AssemblyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssemblyType AssemblyType { get; set; }

        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Devices Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("AssemblyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssemblyName AssemblyName { get; set; }

        [Newtonsoft.Json.JsonProperty("AssemblyUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssemblyUUID AssemblyUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("IsMaintainable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsMaintainable IsMaintainable { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Nodes Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of an Assembly
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssemblyType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Type of Checksum that is employed by Firmware to detect errors and verify data integrity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecksumType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A part or component of a Device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Component
    {
        [Newtonsoft.Json.JsonProperty("ComponentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentType ComponentType { get; set; }

        [Newtonsoft.Json.JsonProperty("ComponentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentName ComponentName { get; set; }

        [Newtonsoft.Json.JsonProperty("ComponentUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentUUID ComponentUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("IsMaintainable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsMaintainable IsMaintainable { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Nodes Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The value used to validate the accuracy of data through the use of a Checksum Algorithm.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecksumKey : TaxonomyElementString
    {

    }

    /// <summary>
    /// Supporting information used to provide additional context to the type of Checksum algorithm used to validate data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecksumDetail : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of a Component
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentType : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Components : global::System.Collections.Generic.List<Component>
    {
    
            public Components() : base() { }        
            public Components(IEnumerable<Component> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A user-defined name for a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A user-defined name for an Assembly
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssemblyName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A user-defined name for a Component
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentName : TaxonomyElementString
    {

    }

    /// <summary>
    /// An identifier for an Assembly
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssemblyUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// An identifier for a component
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// UUID for an individual piece of equipment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A UUID for a OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A user-defined identifier for an OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A record of a condition of a PV system or equipment that may merit investigation or action.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMIssue
    {
        [Newtonsoft.Json.JsonProperty("IssueID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueID IssueID { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueUUID IssueUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactSafety", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactSafety ImpactSafety { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactProduction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactProduction ImpactProduction { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactCapability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactCapability ImpactCapability { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueCause", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueCause IssueCause { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueCauseConfidenceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueCauseConfidenceLevel IssueCauseConfidenceLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueConfidenceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueConfidenceLevel IssueConfidenceLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueStatus IssueStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyLoss", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyLoss EnergyLoss { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureRecords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureRecords FailureRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalConditions ExternalConditions { get; set; }

        [Newtonsoft.Json.JsonProperty("DetectionMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DetectionMethod DetectionMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("UpdateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateLast UpdateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueFoundDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFoundDate IssueFoundDate { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueResolution IssueResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueResolutionDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueResolutionDate IssueResolutionDate { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A category for an OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The status of an OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// The level of confidence that an OMIssue is factual
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueConfidenceLevel : TaxonomyElementString
    {

    }

    /// <summary>
    /// The cause underlying an OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueCause : TaxonomyElementString
    {

    }

    /// <summary>
    /// The level of confidence that the cause of an OMIssue is accurate.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueCauseConfidenceLevel : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureRecords : global::System.Collections.Generic.List<FailureRecord>
    {
    
            public FailureRecords() : base() { }        
            public FailureRecords(IEnumerable<FailureRecord> collection) : base(collection) { }
    
    }

    /// <summary>
    /// An event or condition outside of a PV system that affects the PV system's operation or condition.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalCondition : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalConditions : global::System.Collections.Generic.List<ExternalCondition>
    {
    
            public ExternalConditions() : base() { }        
            public ExternalConditions(IEnumerable<ExternalCondition> collection) : base(collection) { }
    
    }

    /// <summary>
    /// This concept provides a cryptographically secure identity for a device and originates from the distributed ledger or blockchain technologies. The Cryptographic Key ID is derived from an asymmetric private/public key pair, typically generated on the device itself and stored securely, preferably in a hardware-secured environment like a Secure Element (SE). Private keys remain within this secure environment to prevent exposure. The CryptographicKeyID consists of a type identifier, the hash output of public-key-material, and optionally, a CRC check for error detection, ensuring uniqueness and integrity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CryptographicKeyID : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CryptographicKeyIDs : global::System.Collections.Generic.List<CryptographicKeyID>
    {
    
            public CryptographicKeyIDs() : base() { }        
            public CryptographicKeyIDs(IEnumerable<CryptographicKeyID> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The method for detecting an Issue or failure.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DetectionMethod : TaxonomyElementString
    {

    }

    /// <summary>
    /// Datetime of the latest update
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateLast : TaxonomyElementString
    {

    }

    /// <summary>
    /// The date or datetime that an OMIssue is identified.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueFoundDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Record of actions or decisions taken to resolve or address an Issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueResolution : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date of the resolution of an Issue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueResolutionDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// A Task object customized for Operations and Maintenance
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMTask : Task
    {
        [Newtonsoft.Json.JsonProperty("TaskPriority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskPriority TaskPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("UpdateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateLast UpdateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("MaintenanceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaintenanceType MaintenanceType { get; set; }

        [Newtonsoft.Json.JsonProperty("OMIssues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMIssues OMIssues { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskBudget", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskBudget TaskBudget { get; set; }

        [Newtonsoft.Json.JsonProperty("OMActivityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMActivityType OMActivityType { get; set; }

        [Newtonsoft.Json.JsonProperty("OMWorkPlan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMWorkPlan OMWorkPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("OMSkillQualLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMSkillQualLevel OMSkillQualLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceLevelAgreement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceLevelAgreement ServiceLevelAgreement { get; set; }

    }

    /// <summary>
    /// Priority of a Task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskPriority : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMIssues : global::System.Collections.Generic.List<OMIssue>
    {
    
            public OMIssues() : base() { }        
            public OMIssues(IEnumerable<OMIssue> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Category of maintenance activity or action
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaintenanceType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A collection of terms that specify budgeted resources for a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskBudget
    {
        [Newtonsoft.Json.JsonProperty("TaskBudgetFunds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskBudgetFunds TaskBudgetFunds { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskBudgetHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskBudgetHours TaskBudgetHours { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Labor hour budget for a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskBudgetHours : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Funds budget for a task.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskBudgetFunds : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Date and time that a Task is started
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskStartedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The final status of a Task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskStatusFinal : TaxonomyElementString
    {

    }

    /// <summary>
    /// The datetime a task is created
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskCreatedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Specific type of insurance provided by Entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsuranceType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The agency or testing center that grants the certification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationAgency : Entity
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationAgencyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationAgencyName CertificationAgencyName { get; set; }

    }

    /// <summary>
    /// The activity involved in an Operations and Maintenace task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMActivityType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A tool or piece of equipment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ToolItem
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ToolItems : global::System.Collections.Generic.List<ToolItem>
    {
    
            public ToolItems() : base() { }        
            public ToolItems(IEnumerable<ToolItem> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A part, supply item or article that is not normally tracked by serial number
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsumableItem
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsumableItems : global::System.Collections.Generic.List<ConsumableItem>
    {
    
            public ConsumableItems() : base() { }        
            public ConsumableItems(IEnumerable<ConsumableItem> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A article of personal protection equipment (PPE)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PPEItem
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PPEItems : global::System.Collections.Generic.List<PPEItem>
    {
    
            public PPEItems() : base() { }        
            public PPEItems(IEnumerable<PPEItem> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A step by step procedure for carrying out an operations and maintenance (OM) task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMWorkPlan
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Skill, qualification or certification necessary to perform an operations and maintenance (OM) task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMSkillQualLevel : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of the TestLab
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestLabName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A laboratory that performs testing to standards. Implementation partner rather than the certifier of the standard. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestLab : Entity
    {
        [Newtonsoft.Json.JsonProperty("TestLabName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestLabName TestLabName { get; set; }

    }

    /// <summary>
    /// The date and time that a failure was detected
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureDetectedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The datetime that the failure occurred
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The datetime that the failure is corrected or resolved.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureResolvedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The resolution of the failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureResolution : TaxonomyElementString
    {

    }

    /// <summary>
    /// A work order for operations and maintenance (OM).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMWorkOrder
    {
        [Newtonsoft.Json.JsonProperty("OMTasks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMTasks OMTasks { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessInstructions AccessInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("SafetyInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SafetyInstructions SafetyInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethod PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("OMResource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMResource OMResource { get; set; }

        [Newtonsoft.Json.JsonProperty("OMTeam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMTeam OMTeam { get; set; }

        [Newtonsoft.Json.JsonProperty("JobSiteAnalysis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobSiteAnalysis JobSiteAnalysis { get; set; }

        [Newtonsoft.Json.JsonProperty("CloseoutInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloseoutInstructions CloseoutInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("Scheduling", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scheduling Scheduling { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMTasks : global::System.Collections.Generic.List<OMTask>
    {
    
            public OMTasks() : base() { }        
            public OMTasks(IEnumerable<OMTask> collection) : base(collection) { }
    
    }

    /// <summary>
    /// Instructions for access to a site.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessInstructions
    {
        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Addresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses Addresses { get; set; }

        [Newtonsoft.Json.JsonProperty("OperatingHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperatingHours OperatingHours { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Instructions regarding safety for a location or an activity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SafetyInstructions
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tools, equipment or supplies needed for a OMTask
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMResource
    {
        [Newtonsoft.Json.JsonProperty("ProdLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdLineItems ProdLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("ToolItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ToolItems ToolItems { get; set; }

        [Newtonsoft.Json.JsonProperty("PPEItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PPEItems PPEItems { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumableItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConsumableItems ConsumableItems { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The datetime of a schedule event
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Description of operating hours of a facility, site or location.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperatingHours : TaxonomyElementString
    {

    }

    /// <summary>
    /// Contract or agreement between a service provider and a customer which outlines the terms and expectations of service to be provided, level of expected performance, performance measures, exclusions and redress.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceLevelAgreement
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A person who is part of a team
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamMember
    {
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FirstName FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastName LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("MobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MobilePhone MobilePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkPhone WorkPhone { get; set; }

        [Newtonsoft.Json.JsonProperty("PreferredContactMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferredContactMethod PreferredContactMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Email Email { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactTimezone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactTimezone ContactTimezone { get; set; }

        [Newtonsoft.Json.JsonProperty("SkillsQualsCerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SkillsQualsCerts SkillsQualsCerts { get; set; }

        [Newtonsoft.Json.JsonProperty("TeamRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamRole TeamRole { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The role a person has on a team.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamRole : TaxonomyElementString
    {

    }

    /// <summary>
    /// Skills, qualifications and/or certifications of a person.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SkillsQualsCerts : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamMembers : global::System.Collections.Generic.List<TeamMember>
    {
    
            public TeamMembers() : base() { }        
            public TeamMembers(IEnumerable<TeamMember> collection) : base(collection) { }
    
    }

    /// <summary>
    /// A crew or team for operations and maintenance (OM).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMTeam
    {
        [Newtonsoft.Json.JsonProperty("TeamMembers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamMembers TeamMembers { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("TeamName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamName TeamName { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A name or identifier for a team of persons.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A hazards and safety analysis and mitigation plan for activity-level work at a site.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobSiteAnalysis
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Instructions for closing or completing work at a site.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloseoutInstructions
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A window of time for an activity or access to a location.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Scheduling
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ScheduledDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduledDate ScheduledDate { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Date of authorization granted by a utility or regulatory body allowing the DER to connect and interact with the power grid
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionToOperateDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date when a solar energy system or battery storage is placed in service, meaning it has been installed, tested, and deemed operational for its intended use.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommissionDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of a topology.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopologyType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A UUID for a topology.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopologyUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A UUID for a Node, which is an element of a topology.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A node is an element of a PVCollada file that describes geospatial positions and mechanical relationships.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Node
    {
        [Newtonsoft.Json.JsonProperty("NodeUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NodeUUID NodeUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("PVColladaID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVColladaID PVColladaID { get; set; }

        [Newtonsoft.Json.JsonProperty("PVColladaFileID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVColladaFileID PVColladaFileID { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A Topology is a directed graph comprised of Nodes.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Topology
    {
        [Newtonsoft.Json.JsonProperty("TopologyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TopologyType TopologyType { get; set; }

        [Newtonsoft.Json.JsonProperty("TopologyUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TopologyUUID TopologyUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Nodes Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("Edges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Edges Edges { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nodes : global::System.Collections.Generic.List<Node>
    {
    
            public Nodes() : base() { }        
            public Nodes(IEnumerable<Node> collection) : base(collection) { }
    
    }

    /// <summary>
    /// An identifier for an object in a PVCollada file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVColladaID : TaxonomyElementString
    {

    }

    /// <summary>
    /// An identifier for a PVCollada file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVColladaFileID : TaxonomyElementString
    {

    }

    /// <summary>
    /// True if an Assembly, Device or Component has parts that can be serviced or replaced without violating a warranty.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsMaintainable : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// A pair of nodes that define an edge in a graph.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Edge
    {
        [Newtonsoft.Json.JsonProperty("HeadNodeUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeadNodeUUID HeadNodeUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("TailNodeUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TailNodeUUID TailNodeUUID { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Edges : global::System.Collections.Generic.List<Edge>
    {
    
            public Edges() : base() { }        
            public Edges(IEnumerable<Edge> collection) : base(collection) { }
    
    }

    /// <summary>
    /// The identifier for the node that is the head or start of an edge in a graph.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HeadNodeUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The note that is the tail or end of an edge in a graph.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TailNodeUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Types of agreements and financial arrangements for adopting solar power, defining ownership, financing, and operational responsibilities.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Unique identifier for the Loan object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The beginning time for a TimeEntry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntryStartTime : TaxonomyElementString
    {

    }

    /// <summary>
    /// The ending time of a TimeEntry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntryEndTime : TaxonomyElementString
    {

    }

    /// <summary>
    /// Data and notes resulting from execution of a Task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskResult
    {
        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskResults : global::System.Collections.Generic.List<TaskResult>
    {
    
            public TaskResults() : base() { }        
            public TaskResults(IEnumerable<TaskResult> collection) : base(collection) { }
    
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
