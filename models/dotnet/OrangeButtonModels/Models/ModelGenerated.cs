//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------



namespace OrangeButton.Models
{


    /// <summary>
    /// Energy model contains energy predictions and information about the model assumptions and information sources.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModel
    {
        [Newtonsoft.Json.JsonProperty("EnergyModelName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelName EnergyModelName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModelInput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelInput EnergyModelInput { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModelOutput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelOutput EnergyModelOutput { get; set; }

        [Newtonsoft.Json.JsonProperty("ModelRunDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelRunDate ModelRunDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModelID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModelID EnergyModelID { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An item or equipment that is packaged and sold as a unit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        [Newtonsoft.Json.JsonProperty("ProdName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdName ProdName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdMfr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdMfr ProdMfr { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCode ProdCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdType ProdType { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdDatasheet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdDatasheet ProdDatasheet { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdInstructions ProdInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdSpecifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdSpecifications ProdSpecifications { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCertifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCertifications ProdCertifications { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Dimension { get; set; }

        [Newtonsoft.Json.JsonProperty("Packages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Packages Packages { get; set; }

        [Newtonsoft.Json.JsonProperty("Warranties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Warranties Warranties { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdID ProdID { get; set; }

        [Newtonsoft.Json.JsonProperty("SubstituteProducts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubstituteProducts SubstituteProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("ManufacturerUPC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManufacturerUPC ManufacturerUPC { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A singular instance of a Product, usually with a serial number or other unique identifier.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Device
    {
        [Newtonsoft.Json.JsonProperty("SerialNum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerialNum SerialNum { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCode ProdCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdID ProdID { get; set; }

        [Newtonsoft.Json.JsonProperty("Firmware", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Firmware Firmware { get; set; }

        [Newtonsoft.Json.JsonProperty("MaintDateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaintDateLast MaintDateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("InServiceDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InServiceDate InServiceDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Calibration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Calibration Calibration { get; set; }

        [Newtonsoft.Json.JsonProperty("Warranties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Warranties Warranties { get; set; }

        [Newtonsoft.Json.JsonProperty("DeviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceType DeviceType { get; set; }

        [Newtonsoft.Json.JsonProperty("Components", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Components Components { get; set; }

        [Newtonsoft.Json.JsonProperty("DeviceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceName DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("DeviceUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceUUID DeviceUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("CryptographicKeyIDs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CryptographicKeyIDs CryptographicKeyIDs { get; set; }

        [Newtonsoft.Json.JsonProperty("IsMaintainable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsMaintainable IsMaintainable { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Nodes Nodes { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataRecord
    {
        [Newtonsoft.Json.JsonProperty("DeviceUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceUUID DeviceUUID { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherDataRecord
    {
        [Newtonsoft.Json.JsonProperty("IrradDirectNormal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradDirectNormal IrradDirectNormal { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradDiffuseHorizontal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradDiffuseHorizontal IrradDiffuseHorizontal { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArray IrradPlaneOfArray { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradGlobalHorizontal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradGlobalHorizontal IrradGlobalHorizontal { get; set; }

        [Newtonsoft.Json.JsonProperty("TempAmb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmb TempAmb { get; set; }

        [Newtonsoft.Json.JsonProperty("WindSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindSpeed WindSpeed { get; set; }

        [Newtonsoft.Json.JsonProperty("HumidityRelative", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HumidityRelative HumidityRelative { get; set; }

        [Newtonsoft.Json.JsonProperty("PressureAtmospheric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PressureAtmospheric PressureAtmospheric { get; set; }

        [Newtonsoft.Json.JsonProperty("Rainfall", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rainfall Rainfall { get; set; }

        [Newtonsoft.Json.JsonProperty("Snowfall", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Snowfall Snowfall { get; set; }

        [Newtonsoft.Json.JsonProperty("PrecipitationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrecipitationType PrecipitationType { get; set; }

        [Newtonsoft.Json.JsonProperty("Albedo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Albedo Albedo { get; set; }

        [Newtonsoft.Json.JsonProperty("SnowAccumulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnowAccumulation SnowAccumulation { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferenceCellMeasurement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReferenceCellMeasurement ReferenceCellMeasurement { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferenceCellMeasurement
    {
        [Newtonsoft.Json.JsonProperty("TempRefCell", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempRefCell TempRefCell { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentShortCircuit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentShortCircuit CurrentShortCircuit { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageOpenCircuit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageOpenCircuit VoltageOpenCircuit { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


    /// <summary>
    /// Physical or Mailing address
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public City City { get; set; }

        [Newtonsoft.Json.JsonProperty("StateProvince", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StateProvince StateProvince { get; set; }

        [Newtonsoft.Json.JsonProperty("ZipPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ZipPostalCode ZipPostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Country Country { get; set; }

        [Newtonsoft.Json.JsonProperty("County", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public County County { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType AddressType { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressID AddressID { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("AddrLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddrLine1 AddrLine1 { get; set; }

        [Newtonsoft.Json.JsonProperty("AddrLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddrLine2 AddrLine2 { get; set; }

        [Newtonsoft.Json.JsonProperty("AddrLine3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddrLine3 AddrLine3 { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A person or contact information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactID ContactID { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Email Email { get; set; }

        [Newtonsoft.Json.JsonProperty("MobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MobilePhone MobilePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkPhone WorkPhone { get; set; }

        [Newtonsoft.Json.JsonProperty("HomePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomePhone HomePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FirstName FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("MiddleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MiddleName MiddleName { get; set; }

        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastName LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactType ContactType { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("PreferredContactMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferredContactMethod PreferredContactMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactTimezone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactTimezone ContactTimezone { get; set; }

        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Title Title { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Addresses : global::System.Collections.Generic.List<Address>
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contacts : global::System.Collections.Generic.List<Contact>
    {

    }

    /// <summary>
    /// Name of the city in the physical or mailing address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class City : TaxonomyElementString
    {

    }

    /// <summary>
    /// State of a Province of the mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StateProvince : TaxonomyElementString
    {

    }

    /// <summary>
    /// Zip Code / Postal Code of a mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ZipPostalCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// ISO country code where system is located.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Country : TaxonomyElementString
    {

    }

    /// <summary>
    /// Decimal value of latitude of the physical site in degrees.  Positive North of the Equator.  Negative South of the Equator
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Latitude : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Decimal value of longitude of the physical site in degrees.  Positive east of the Prime Meridian.  Negative west of the Prime Meridian.  North America is negative..
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Longitude : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// County of the physical or mailing address
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class County : TaxonomyElementString
    {

    }

    /// <summary>
    /// Email address
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Email : TaxonomyElementString
    {

    }

    /// <summary>
    /// Phone Number of a cell phone or mobile device.  This phone is expected to be able to receive text messages.  Characters like hyphen, period, x for extension are allowed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MobilePhone : TaxonomyElementString
    {

    }

    /// <summary>
    /// Phone number to be used during working hours.  Characters like hyphen, period, x for extension are allowed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkPhone : TaxonomyElementString
    {

    }

    /// <summary>
    /// Phone number to be used for high priority calls only.  Characters like hyphen, period, x for extension are allowed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomePhone : TaxonomyElementString
    {

    }

    /// <summary>
    /// First name of a person.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirstName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Middle name of a person.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MiddleName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The last name of person.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LastName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The height of ground level at a location relative to sea level.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Altitude : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A location is defined by Latitude, Longitude and Altitude.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {
        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Latitude Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Longitude Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Altitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Altitude Altitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Elevation Elevation { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationType LocationType { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationID LocationID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationDeterminationMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDeterminationMethod LocationDeterminationMethod { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Height from ground level.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Elevation : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// First line of a mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddrLine1 : TaxonomyElementString
    {

    }

    /// <summary>
    /// Second line of a mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddrLine2 : TaxonomyElementString
    {

    }

    /// <summary>
    /// Third line of a mailing or physical address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddrLine3 : TaxonomyElementString
    {

    }

    /// <summary>
    /// Type of design/energy production model for the PV system which could be Pvsyst, SAM, PV Watts, or Other.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelName : TaxonomyElementString
    {

    }


    /// <summary>
    /// Generic Text field used in fields to provide more detail
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description : TaxonomyElementString
    {

    }

    /// <summary>
    /// This field indicates if this instance of an object is required or optional. Conditionally optional the conditions can be described in RequirementNotes.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequirementLevel : TaxonomyElementString
    {

    }

    /// <summary>
    /// Method of the determining the location
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationDeterminationMethod : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of contact being specified
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The method of contact the contact prefers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreferredContactMethod : TaxonomyElementString
    {

    }

    /// <summary>
    /// The identifier of the location.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The identifier of the address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The identifier of the contact.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The timezone where the contact is located.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactTimezone : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of location being specified
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A generic URL to a file folder or a single file for transmitting documents
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileFolderURL : TaxonomyElementString
    {

    }

    /// <summary>
    /// A URL string
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class URL : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of address being specified
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A task to accomplish
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Task
    {
        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskName TaskName { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskStatus TaskStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskCompletedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskCompletedDate TaskCompletedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskID TaskID { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskDueDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskDueDate TaskDueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Checklist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Checklist Checklist { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskType TaskType { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethod PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskCreatedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskCreatedDate TaskCreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskStartedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskStartedDate TaskStartedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskResults TaskResults { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntries TimeEntries { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The status of a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskStatus : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Devices : global::System.Collections.Generic.List<Device>
    {

    }

    /// <summary>
    /// Capacity in DC at Standard Test Conditions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapacityDC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A product used within a PVSystem and the quantity of that product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdLineItem
    {
        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product Product { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("AmountExtended", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountExtended AmountExtended { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The status of the operation of the PVSystem
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationalStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// The status of the operation of the PVSystem
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationalPhase : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdType : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdLineItems : global::System.Collections.Generic.List<ProdLineItem>
    {

    }

    /// <summary>
    /// The status of the BillOfMaterials
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfMaterialsStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// The title of the contact
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Title : TaxonomyElementString
    {

    }

    /// <summary>
    /// The notes about the requirement level of the engineering review
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequirementNotes : TaxonomyElementString
    {

    }

    /// <summary>
    /// The date the task was completed
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskCompletedDate : TaxonomyElementString
    {

    }


    /// <summary>
    /// The ID of the structure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StructureID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The identifier of the electrical service system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElectricalServiceID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The risk category from ASCE7
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskCategory : TaxonomyElementString
    {

    }

    /// <summary>
    /// The UUID of the task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The due date of a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskDueDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// An Checklist or survey
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Checklist
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ChecklistType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecklistType ChecklistType { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionID TransactionID { get; set; }

        [Newtonsoft.Json.JsonProperty("ChecklistDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecklistDate ChecklistDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Questions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Questions Questions { get; set; }

        [Newtonsoft.Json.JsonProperty("Answers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Answers Answers { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The result of an Checklist question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Answer
    {
        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerValue AnswerValue { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionLineID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionLineID TransactionLineID { get; set; }

        [Newtonsoft.Json.JsonProperty("QuestionID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestionID QuestionID { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerValues AnswerValues { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A question for an Checklist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Question
    {
        [Newtonsoft.Json.JsonProperty("QuestionID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestionID QuestionID { get; set; }

        [Newtonsoft.Json.JsonProperty("QuestionLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestionLabel QuestionLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerType AnswerType { get; set; }

        [Newtonsoft.Json.JsonProperty("QuestionUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestionUnits QuestionUnits { get; set; }

        [Newtonsoft.Json.JsonProperty("RequirementLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequirementLevel RequirementLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("RequirementNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequirementNotes RequirementNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerOptions AnswerOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerRangeMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerRangeMin AnswerRangeMin { get; set; }

        [Newtonsoft.Json.JsonProperty("AnswerRangeMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerRangeMax AnswerRangeMax { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An ID for the Checklist question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The statement of the Checklist Question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionLabel : TaxonomyElementString
    {

    }

    /// <summary>
    /// The value of the Checklist Result
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerValue : TaxonomyElementString
    {

    }

    /// <summary>
    /// The ID of the transaction line
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionLineID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of Checklist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecklistType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The ID of the transaction
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of result expected by the question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The date of the Checklist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecklistDate : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Answers : global::System.Collections.Generic.List<Answer>
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Questions : global::System.Collections.Generic.List<Question>
    {

    }

    /// <summary>
    /// The units of the question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionUnits : TaxonomyElementString
    {

    }


    /// <summary>
    /// The datasheet for the product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdDatasheet : TaxonomyElementString
    {

    }

    /// <summary>
    /// A single document in a collection of the instructions for a product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdInstruction : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdInstructions : global::System.Collections.Generic.List<ProdInstruction>
    {

    }

    /// <summary>
    /// Use this for describing an individual specification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecificationName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The enumerated list of the types of major specifications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecificationType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The specific unit of the specification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecificationUnit : TaxonomyElementString
    {

    }

    /// <summary>
    /// The value of the specific Specification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecificationValue : TaxonomyElementString
    {

    }

    /// <summary>
    /// A single specification for a product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdSpecification
    {
        [Newtonsoft.Json.JsonProperty("SpecificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecificationName SpecificationName { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecificationType SpecificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecificationUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecificationUnit SpecificationUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecificationValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecificationValue SpecificationValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdSpecifications : global::System.Collections.Generic.List<ProdSpecification>
    {

    }

    /// <summary>
    /// A certification for a product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdCertification
    {
        [Newtonsoft.Json.JsonProperty("CertificationAgency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationAgency CertificationAgency { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationDate CertificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationExpirationDate CertificationExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationName CertificationName { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateValue CertificateValue { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationStandard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationStandard CertificationStandard { get; set; }

        [Newtonsoft.Json.JsonProperty("Firmware", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Firmware Firmware { get; set; }

        [Newtonsoft.Json.JsonProperty("TestLab", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestLab TestLab { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the certification name
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationAgencyName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdCertifications : global::System.Collections.Generic.List<ProdCertification>
    {

    }

    /// <summary>
    /// The UUID of the task type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskTypeID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Velocity of the wind, typically measured at 3m height above ground.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WindSpeed : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerValues : global::System.Collections.Generic.List<AnswerValue>
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerOptions : global::System.Collections.Generic.List<AnswerOption>
    {

    }

    /// <summary>
    /// An option for the answer to a question
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerOption : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskType
    {
        [Newtonsoft.Json.JsonProperty("TaskTypeID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskTypeID TaskTypeID { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskTypeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskTypeName TaskTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskGroup TaskGroup { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of a TaskType
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskTypeName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the task category which is used to normalize task types when searching across multiple companies.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskGroup : TaxonomyElementString
    {

    }

    /// <summary>
    /// A service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Service
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceName ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceID ServiceID { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceType ServiceType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A quantity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quantity : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// A ServiceLineItem
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceLineItem
    {
        [Newtonsoft.Json.JsonProperty("Service", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Service Service { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceQuantityUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceQuantityUnit ServiceQuantityUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("ServicePaidTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServicePaidTo ServicePaidTo { get; set; }

        [Newtonsoft.Json.JsonProperty("ServicePaidBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServicePaidBy ServicePaidBy { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnitPrice UnitPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("AmountExtended", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountExtended AmountExtended { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceLineItems : global::System.Collections.Generic.List<ServiceLineItem>
    {

    }

    /// <summary>
    /// The scope of work for the given context in which the object appears.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfServices
    {
        [Newtonsoft.Json.JsonProperty("ServiceLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceLineItems ServiceLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfServicesStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfServicesStatus BillOfServicesStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The status of the overall scope of work
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfServicesStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// The UUID of the service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The method by which the cost of a service is evaluated.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceQuantityUnit : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of Service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceType
    {
        [Newtonsoft.Json.JsonProperty("ServiceTypeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceTypeName ServiceTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceTypeID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceTypeID ServiceTypeID { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceGroup ServiceGroup { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the service type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceTypeName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The UUID of the ServiceType
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceTypeID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The optional list of normalized services that allow for cross-platform comparison of service data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceGroup : TaxonomyElementString
    {

    }

    /// <summary>
    /// The Service Payment Responsibility for the Payee of the Service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServicePaidTo : TaxonomyElementString
    {

    }

    /// <summary>
    /// The Service Payment Responsibility for the Payer of the Service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServicePaidBy : TaxonomyElementString
    {

    }

    /// <summary>
    /// Amount Per ServiceQuantityUnit
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitPrice : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The total amount of the individual line item calculated by multiplying Quantity by UnitPrice
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmountExtended : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Amount of rainfall in a given period of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rainfall : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Ratio between the amount of moisture in the air and the maximum amount of moisture that could be present in the air at current air temperature.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HumidityRelative : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Current of a photovoltaic device at short circuit conditions.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentShortCircuit : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Voltage at open circuit conditions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageOpenCircuit : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The air pressure at the location of the weather data record
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PressureAtmospheric : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Manufacturer's serial number of a device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SerialNum : TaxonomyElementString
    {

    }

    /// <summary>
    /// The amount of direct irradiance received per unit area on a surface that is perpendicular (or normal) to the direction of the sun. Direct irradiance, also termed beam irradiance, is not scattered or reflected by the atmosphere, clouds, or other surfaces before arriving at the surface of measurement. Direct normal irradiance is measured in watts per square meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradDirectNormal : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Total amount of shortwave radiation received per unit area on a horizontal surface. Measured in watts per square meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradGlobalHorizontal : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Date of latest maintenance activity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaintDateLast : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of the product, for example ABC Brand Inverter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Temperature of the air.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempAmb : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Energy (AC) measured for a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Percentage of light that is reflected off the ground surface
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Albedo : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Weather source used for the model, for example: ground measurements, NSRDB TMY3, SolarAnywhere v3.0, SolarGIS vX.Y
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelWeatherSource : TaxonomyElementString
    {

    }

    /// <summary>
    /// Type of precipitation according to SYNOP codes
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrecipitationType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of the product or equipment manufacturer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdMfr : TaxonomyElementString
    {

    }

    /// <summary>
    /// Description of calibration method for an instrument.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalibrationMeth : TaxonomyElementString
    {

    }

    /// <summary>
    /// A product code is a standardized, unique human-readable identifier that is compact, and can be easily parsed. It consists of an entity code concatenated to a product specific identification string, separated by a hyphen. The format of a product code is: [EntityCode]-[ProductString], e.g., “HANWH-Q_PEAK_DUO_BLK_G10__AC_365”. A product string is comprised of upper-case letters, numbers, and underscores. Any character that is not a letter or number is a special character and will be replaced by an underscore. All letter characters will be upper case. To avoid clashes between identical product codes, an additional hyphen and an integer 1, 2, 3, ..., is appended, e.g. {ProdCode}-{incremental number}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdCode : TaxonomyElementString
    {

    }

    /// <summary>
    /// Depth of snow on the ground during a given period of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnowAccumulation : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Date of last calibration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalibrationDateLast : TaxonomyElementString
    {

    }

    /// <summary>
    /// Temperature of a reference cell.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempRefCell : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The amount of diffuse radiation received per unit area on a horizontal surface. Diffuse irradiance arrives at the surface of measurement from any direction other than the direction of the sun. Diffuse horizontal irradiance is measured in watts per square meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradDiffuseHorizontal : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The irradiance on a plane from all sources, both direct and diffuse. The plane can be horizontal or tilted. Plane of array irradiance is measured in watts per square meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradPlaneOfArray : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Power (AC) measured at an instant in time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Amount of snowfall in a given period of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Snowfall : TaxonomyElementNumber
    {

    }


    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementNumber
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementInteger
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxonomyElementBoolean
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("Precision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Precision { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }
    /// <summary>
    /// Azimuth relative to North where North is 0 degrees and East is 90 degrees
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Azimuth : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A UUID for identifying a specific string
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVStringID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Area
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Area : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Tilt is the angle relative to horizontal. Horizontal is defined as the x,y plane of a right-hand coordinate system where the the x-axis is East, y-axis is North, and the z-axis is vertical.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tilt : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Roll is a right-hand rotation about an oriented axis, with a positive value being a counter-clockwise rotation. In the context of a solar module, Roll is the rotation of the module about the vector normal to the module's plane that is oriented towards the sky.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Roll : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The UUID of the roofplane
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoofPlaneID : TaxonomyElementString
    {

    }

    /// <summary>
    /// An array of modules within a PVSystem that have a common orientation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVArray
    {
        [Newtonsoft.Json.JsonProperty("PVStrings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVStrings PVStrings { get; set; }

        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Orientation Orientation { get; set; }

        [Newtonsoft.Json.JsonProperty("Area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Area Area { get; set; }

        [Newtonsoft.Json.JsonProperty("RoofPlaneID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoofPlaneID RoofPlaneID { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductLineItems ProductLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Devices Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("PVArrayID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVArrayID PVArrayID { get; set; }

        [Newtonsoft.Json.JsonProperty("ModuleOrientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleOrientation ModuleOrientation { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVStrings : global::System.Collections.Generic.List<PVString>
    {

    }

    /// <summary>
    /// A string of Modules within a PVSystem
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVString
    {
        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public global::System.Collections.Generic.List<Device> Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Orientation Orientation { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductLineItems ProductLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("PVStringID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVStringID PVStringID { get; set; }

        [Newtonsoft.Json.JsonProperty("ModuleOrientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleOrientation ModuleOrientation { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Orientation is defined by Azimuth, Tilt and Roll. Azimuth and Tilt are defined in the context of a right-hand coordinate system where the the x-axis is East, y-axis is North, and the z-axis is vertical.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orientation
    {
        [Newtonsoft.Json.JsonProperty("Azimuth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Azimuth Azimuth { get; set; }

        [Newtonsoft.Json.JsonProperty("Tilt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tilt Tilt { get; set; }

        [Newtonsoft.Json.JsonProperty("Roll", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Roll Roll { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductLineItems : global::System.Collections.Generic.List<ProductLineItem>
    {

    }

    /// <summary>
    /// A product used within a PVSystem and the quantity of that product
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductLineItem
    {
        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product Product { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("AmountExtended", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountExtended AmountExtended { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    

    /// <summary>
    /// A UUID for identifying a specific array
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVArrayID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Capacity in AC at nominal conditions. Equal to rated capacity for a single inverter, or sum of inverter rated capacities for a PV system. Nominal conditions for an inverter are continuous output at unity power factor.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapacityAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Date, source and content of a comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Comment
    {
        [Newtonsoft.Json.JsonProperty("CommentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentID CommentID { get; set; }

        [Newtonsoft.Json.JsonProperty("CommentDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentDate CommentDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CommentText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentText CommentText { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The UUID of a comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date of a comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Content text of a comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentText : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Comments : global::System.Collections.Generic.List<Comment>
    {

    }


    /// <summary>
    /// The orientation of a module, can be Landscape or Portrait
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleOrientation : TaxonomyElementString
    {

    }

    /// <summary>
    /// A tag, keyword or label.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tag : TaxonomyElementString
    {

    }

    /// <summary>
    /// A number defining a length of time
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Duration : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The mass of the parent object. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mass : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The width of the parent object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Width : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The length of the parent object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Length : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The height of the parent object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The weight of the parent object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Dimensions of an object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimension
    {
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Length Length { get; set; }

        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Width Width { get; set; }

        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Height Height { get; set; }

        [Newtonsoft.Json.JsonProperty("Mass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mass Mass { get; set; }

        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight Weight { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


    /// <summary>
    /// Elements describing a package
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Package
    {
        [Newtonsoft.Json.JsonProperty("Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Dimension { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity Quantity { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Packages : global::System.Collections.Generic.List<Package>
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tags : global::System.Collections.Generic.List<Tag>
    {

    }

    /// <summary>
    /// Classification of the Warranty. What type of Warranty is it?
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Universally Unique Identifier for the Warranty
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Human Readable Name for the Warranty
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyName : TaxonomyElementString
    {

    }

    /// <summary>
    /// How long is the Warranty Valid For? 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyDuration : TaxonomyElementInteger
    {

    }

    /// <summary>
    /// Date the Warranty Comes Into Force
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyEffectiveDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date the Warranty Is No Longer in Force
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyExpirationDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Guarantee of minimum quality level
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Warranty
    {
        [Newtonsoft.Json.JsonProperty("WarrantyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyType WarrantyType { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyID WarrantyID { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyName WarrantyName { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyDuration WarrantyDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyEffectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyEffectiveDate WarrantyEffectiveDate { get; set; }

        [Newtonsoft.Json.JsonProperty("WarrantyExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarrantyExpirationDate WarrantyExpirationDate { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Warranties : global::System.Collections.Generic.List<Warranty>
    {

    }

    /// <summary>
    /// The date that certification was awarded to product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The expiration date of a certification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationExpirationDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The name of the certification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationName : TaxonomyElementString
    {

    }

    /// <summary>
    /// The document identifier of a certification.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateValue : TaxonomyElementString
    {

    }

    /// <summary>
    /// Any commercial or legal organization.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entity
    {
        [Newtonsoft.Json.JsonProperty("Addresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses Addresses { get; set; }

        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Email Email { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkPhone WorkPhone { get; set; }

        [Newtonsoft.Json.JsonProperty("LegalEntityIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LegalEntityIdentifier LegalEntityIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URL URL { get; set; }

        [Newtonsoft.Json.JsonProperty("TaxID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxID TaxID { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditRatings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditRatings CreditRatings { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethods PaymentMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntityRole EntityRole { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Legal Entity Identifier (LEI) of the entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalEntityIdentifier : TaxonomyElementString
    {

    }

    /// <summary>
    /// Tax identification number of the entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Credit rating.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditRating
    {
        [Newtonsoft.Json.JsonProperty("CreditScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditScore CreditScore { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditScoreSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditScoreSource CreditScoreSource { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Credit symbol that indicates the degree of credit worthiness. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditScore : TaxonomyElementString
    {

    }

    /// <summary>
    /// Issuing source of a credit score, such as a Rating Agency. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditScoreSource : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditRatings : global::System.Collections.Generic.List<CreditRating>
    {

    }

    /// <summary>
    /// Services or function provided by this entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityRole : TaxonomyElementString
    {

    }

        /// <summary>
    /// Firmware version 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirmwareVersion : TaxonomyElementString
    {

    }

    /// <summary>
    /// An object that describes the key, type and supporting information related to employing Checksums to manage data accuracy. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Checksum
    {
        [Newtonsoft.Json.JsonProperty("ChecksumKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecksumKey ChecksumKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ChecksumType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecksumType ChecksumType { get; set; }

        [Newtonsoft.Json.JsonProperty("ChecksumDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChecksumDetail ChecksumDetail { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Permanent software programmed into a read-only memory.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Firmware
    {
        [Newtonsoft.Json.JsonProperty("FirmwareVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FirmwareVersion FirmwareVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("Checksum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Checksum Checksum { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Additional identifier for a record or data set
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlternativeIdentifier
    {
        [Newtonsoft.Json.JsonProperty("SourceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceName SourceName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentifierType IdentifierType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlternativeIdentifiers : global::System.Collections.Generic.List<AlternativeIdentifier>
    {

    }

    /// <summary>
    /// A unique identifier for a record or dataset.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identifier : TaxonomyElementString
    {

    }
    /// <summary>
    /// Name of the data source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SourceName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Generic abstract base class for generation/storage systems.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class System
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationalStatus OperationalStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationalPhase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationalPhase OperationalPhase { get; set; }

        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<Device> Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfMaterials BillOfMaterials { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemID SystemID { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemPrice SystemPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemType SystemType { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfServices BillOfServices { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomElements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomElements CustomElements { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemState SystemState { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemStage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemStage SystemStage { get; set; }

        [Newtonsoft.Json.JsonProperty("PermissionToOperateDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionToOperateDate PermissionToOperateDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CommissionDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommissionDate CommissionDate { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Generic identifier of a system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Price of a generic system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemPrice : TaxonomyElementNumber
    {

    }


    /// <summary>
    /// A solar photovoltaic system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVSystem : System
    {
        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("StructureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StructureID StructureID { get; set; }

        [Newtonsoft.Json.JsonProperty("ElectricalServiceID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElectricalServiceID ElectricalServiceID { get; set; }

        [Newtonsoft.Json.JsonProperty("RiskCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RiskCategory RiskCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("PVArrays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IEnumerable<PVArray> PVArrays { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityAC CapacityAC { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyModels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyModels EnergyModels { get; set; }

        [Newtonsoft.Json.JsonProperty("Production", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Production Production { get; set; }

    }

    /// <summary>
    /// Type of system referenced by base abstract class System.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemType : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACArray : global::System.Collections.Generic.List<EnergyAC>
    {

    }



    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempAmbArray : global::System.Collections.Generic.List<TempAmb>
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACArray : global::System.Collections.Generic.List<PowerAC>
    {

    }


    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradGlobalHorizArray : global::System.Collections.Generic.List<IrradGlobalHorizontal>
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradPlaneOfArrayArray : global::System.Collections.Generic.List<IrradPlaneOfArray>
    {

    }


    /// <summary>
    /// A generic object containing information describing where the aforementioned data applies to. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Scope
    {
        [Newtonsoft.Json.JsonProperty("ScopeID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScopeID ScopeID { get; set; }

        [Newtonsoft.Json.JsonProperty("ScopeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScopeType ScopeType { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An identifier for the device, system, portfolio, region, etc.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScopeID : TaxonomyElementString
    {

    }

    /// <summary>
    /// The scope where data applies.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScopeType : TaxonomyElementString
    {

    }

    /// <summary>
    /// An object containing data for measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Measurement
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An object containing Energy AC measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

    }

    /// <summary>
    /// Object containing VoltageDC measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDCMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("VoltageDCArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCArray VoltageDCArray { get; set; }

    }

    /// <summary>
    /// An object containing Irradiance Global Horizontal (IrradGlobalHoriz) measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradGlobalHorizMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("IrradGlobalHorizArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradGlobalHorizArray IrradGlobalHorizArray { get; set; }

    }

    /// <summary>
    /// An object containing PowerAC measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerACMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("PowerACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACArray PowerACArray { get; set; }

    }

    /// <summary>
    /// An object containing Ambient Temperature (TempAmb) measurements.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TempAmbMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("TempAmbArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmbArray TempAmbArray { get; set; }

    }

    /// <summary>
    /// The 50th percentile of annual AC energy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACAnnualP50 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// The 90th percentile of annual AC energy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACAnnualP90 : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Inputs to an energy model.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelInput
    {
        [Newtonsoft.Json.JsonProperty("ModelWeatherSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelWeatherSource ModelWeatherSource { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityAC CapacityAC { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityDC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityDC CapacityDC { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradTranspositionModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradTranspositionModel IrradTranspositionModel { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Output from an energy model.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelOutput
    {
        [Newtonsoft.Json.JsonProperty("EnergyACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACArray EnergyACArray { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACAnnualP50", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACAnnualP50 EnergyACAnnualP50 { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACAnnualP90", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACAnnualP90 EnergyACAnnualP90 { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACArray PowerACArray { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACAnnual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACAnnual EnergyACAnnual { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACModeled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACModeled EnergyACModeled { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The date and time associated with the energy model run.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelRunDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The model used to transpose from global horizontal irradiance (GHI) to plane-of-array (POA) irradiance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradTranspositionModel : TaxonomyElementString
    {

    }

    /// <summary>
    /// The total annual AC energy for a PV system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACAnnual : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModels : global::System.Collections.Generic.List<EnergyModel>
    {

    }

    /// <summary>
    /// A collection of electrical and related measurements with a common scope.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Production
    {
        [Newtonsoft.Json.JsonProperty("EnergyACMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACMeas EnergyACMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradGlobalHorizMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradGlobalHorizMeas IrradGlobalHorizMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerACMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PowerACMeas PowerACMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("TempAmbMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TempAmbMeas TempAmbMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("VoltageDCMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoltageDCMeas VoltageDCMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArrayMeas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArrayMeas IrradPlaneOfArrayMeas { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Bill of Materials
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfMaterials
    {
        [Newtonsoft.Json.JsonProperty("ProdLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdLineItems ProdLineItems { get; set; }

        [Newtonsoft.Json.JsonProperty("BillOfMaterialsStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfMaterialsStatus BillOfMaterialsStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Measurements of plane-of-array (POA) irradiance
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrradPlaneOfArrayMeas : Measurement
    {
        [Newtonsoft.Json.JsonProperty("IrradPlaneOfArrayArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrradPlaneOfArrayArray IrradPlaneOfArrayArray { get; set; }

    }


    /// <summary>
    /// Modeled AC energy for a period of time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACModeled : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// An identifier for an energy model.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyModelID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Minimum range of acceptable input.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerRangeMin : TaxonomyElementNumber
    {

    }


    /// <summary>
    /// Maximum range of acceptable input.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerRangeMax : TaxonomyElementNumber
    {

    }


    /// <summary>
    /// Unique identifier for the Product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A value from the enumerated list of the possible standards that a product can have.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationStandard : TaxonomyElementString
    {

    }

    /// <summary>
    /// A fraction of nominal AC capacity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapacityFractionAC : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// A product that can serve as a replacement for a given Product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubstituteProduct
    {
        [Newtonsoft.Json.JsonProperty("ProdCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdCode ProdCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdID ProdID { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdMfr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdMfr ProdMfr { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdName ProdName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProdType ProdType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubstituteProducts : global::System.Collections.Generic.List<SubstituteProduct>
    {

    }

    /// <summary>
    /// A record of time logged to a given Job.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntry
    {
        [Newtonsoft.Json.JsonProperty("TimeEntryID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntryID TimeEntryID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntryDate TimeEntryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Worker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Worker Worker { get; set; }

        [Newtonsoft.Json.JsonProperty("JobRoleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobRoleName JobRoleName { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntryEndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntryEndTime TimeEntryEndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeEntryStartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeEntryStartTime TimeEntryStartTime { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Unique identifier of this TimeEntry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntryID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date of this TimeEntry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntryDate : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntries : global::System.Collections.Generic.List<TimeEntry>
    {

    }

    /// <summary>
    /// Individual that provides a service or performs a task.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Worker
    {
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FirstName FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastName LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("HomePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomePhone HomePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("MobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MobilePhone MobilePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkPhone WorkPhone { get; set; }

        [Newtonsoft.Json.JsonProperty("PreferredContactMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferredContactMethod PreferredContactMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Title Title { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Email Email { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactTimezone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactTimezone ContactTimezone { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkerID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerID WorkerID { get; set; }

        [Newtonsoft.Json.JsonProperty("EmploymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentType EmploymentType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A unique identifier for the Laborer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Description of the role an individual is performing on a given Job. This determines their OES wage level in prevailing wage Jobs. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobRoleName : TaxonomyElementString
    {

    }

    /// <summary>
    /// An enumerated list of applicable employment types.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Expected data type of the input for the given CustomElement
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Object the represents custom data elements that are not represented explicitly in the taxonomy. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomElement
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("ElementID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementID ElementID { get; set; }

        [Newtonsoft.Json.JsonProperty("ElementName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementName ElementName { get; set; }

        [Newtonsoft.Json.JsonProperty("ElementValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementValue ElementValue { get; set; }

        [Newtonsoft.Json.JsonProperty("ElementItemType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementItemType ElementItemType { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Unique identifier of the CustomElement as represented in the host environment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElementID : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of the CustomElement within the host environment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElementName : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomElements : global::System.Collections.Generic.List<CustomElement>
    {

    }

    /// <summary>
    /// The Value of the CustomElement in this instance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElementValue : TaxonomyElementString
    {

    }

    /// <summary>
    /// The Orange Button ItemType that the CustomElement represents in this instance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElementItemType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Voltage (DC) measured at an instant in time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDC : TaxonomyElementNumber
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageDCArray : global::System.Collections.Generic.List<VoltageDC>
    {

    }

    /// <summary>
    /// The token assigned by the payment processor to represent a previously stored payment method. This value should not contain any information that is subject to Payment Card Industry (PCI) compliance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentToken : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of unique identifier used to represent a unique datapoint as the AlternativeIdentifier. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentifierType : TaxonomyElementString
    {

    }

    /// <summary>
    /// The named method of payment(s) at the payment processor that can be used to fund the transaction(s). Used for expenses related to a task, non-payroll related payments and other payments that may not be included in existing contractual payments.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethod
    {
        [Newtonsoft.Json.JsonProperty("PaymentToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentToken PaymentToken { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternativeIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternativeIdentifiers AlternativeIdentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentMethodName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodName PaymentMethodName { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The name of the account that is meaningful to the person making the payment. This does not need to be unique or meaningful to anyone else. This value is not subject to Payment Card Industry (PCI) compliance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethodName : TaxonomyElementString
    {

    }

    /// <summary>
    /// Universal Product Code (UPC) (technically refers to UPC-A) consists of 12 digits that are uniquely assigned to each trade item. This value is assigned by the manufacturer of the trade item/product. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManufacturerUPC : TaxonomyElementString
    {

    }

    /// <summary>
    /// True if the associated object (project, process, task, etc.) is Cancelled.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsCancelled : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// True if the associated object (project, process, task, etc.) is Paused.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsPaused : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// An enumerated value describing a stage in a process
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stage : TaxonomyElementString
    {

    }

    /// <summary>
    /// State of a system at a moment in time. Used primarily for system availability.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemState : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethods : global::System.Collections.Generic.List<PaymentMethod>
    {

    }

    /// <summary>
    /// The lifecycle stage of a system.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemStage
    {
        [Newtonsoft.Json.JsonProperty("IsCancelled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsCancelled IsCancelled { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPaused", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsPaused IsPaused { get; set; }

        [Newtonsoft.Json.JsonProperty("Stage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage Stage { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


    /// <summary>
    /// A collection of terms that describe an energy loss for photovoltaic systems.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyLoss
    {
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyACLoss", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyACLoss EnergyACLoss { get; set; }

        [Newtonsoft.Json.JsonProperty("IsRecoverable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsRecoverable IsRecoverable { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyLossCause", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyLossCause EnergyLossCause { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("CapacityFractionAC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityFractionAC CapacityFractionAC { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Energy production lost
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyACLoss : TaxonomyElementNumber
    {

    }


    /// <summary>
    /// True if energy loss is recoverable by maintenance or other action.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsRecoverable : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// Cause of an energy loss
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnergyLossCause : TaxonomyElementString
    {

    }

    /// <summary>
    /// A unique identifier for a failure record
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A collection of data describing a failure. Failure is the termination of the ability of an item to perform a required function.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureRecord
    {
        [Newtonsoft.Json.JsonProperty("FailureID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureID FailureID { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactSafety", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactSafety ImpactSafety { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactCapability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactCapability ImpactCapability { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactProduction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactProduction ImpactProduction { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureCause", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureCause FailureCause { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureOperatingCondition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureOperatingCondition FailureOperatingCondition { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureMechanism", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureMechanism FailureMechanism { get; set; }

        [Newtonsoft.Json.JsonProperty("DetectionMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DetectionMethod DetectionMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureDetectedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureDetectedDate FailureDetectedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureResolvedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureResolvedDate FailureResolvedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureDate FailureDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureResolution FailureResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The impact on safety of an Issue or Failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpactSafety : TaxonomyElementString
    {

    }

    /// <summary>
    /// The impact on production of a Failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpactProduction : TaxonomyElementString
    {

    }

    /// <summary>
    /// The impact on an item's capability of an Issue or Failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpactCapability : TaxonomyElementString
    {

    }

    /// <summary>
    /// The physical, chemical or other process that leads to a failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureMechanism : TaxonomyElementString
    {

    }

    /// <summary>
    /// Circumstances associated with the design, manufacture, installation, use and maintenance that have led to a failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureCause : TaxonomyElementString
    {

    }

    /// <summary>
    /// The operating condition of an item when a failure occurs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureOperatingCondition : TaxonomyElementString
    {

    }


    /// <summary>
    /// Date that a device is first placed in service.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InServiceDate : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Calibration
    {
        [Newtonsoft.Json.JsonProperty("CalibrationDateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationDateLast CalibrationDateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("CalibrationMeth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationMeth CalibrationMeth { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceType : TaxonomyElementString
    {

    }

    /// <summary>
    /// Type of Checksum that is employed by Firmware to detect errors and verify data integrity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecksumType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A part or component of a Device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Component
    {
        [Newtonsoft.Json.JsonProperty("ComponentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentType ComponentType { get; set; }

        [Newtonsoft.Json.JsonProperty("ComponentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentName ComponentName { get; set; }

        [Newtonsoft.Json.JsonProperty("ComponentUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentUUID ComponentUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("IsMaintainable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsMaintainable IsMaintainable { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Nodes Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The value used to validate the accuracy of data through the use of a Checksum Algorithm.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecksumKey : TaxonomyElementString
    {

    }

    /// <summary>
    /// Supporting information used to provide additional context to the type of Checksum algorithm used to validate data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChecksumDetail : TaxonomyElementString
    {

    }

    /// <summary>
    /// The type of a Component
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentType : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Components : global::System.Collections.Generic.List<Component>
    {

    }

    /// <summary>
    /// A user-defined name for a device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A user-defined name for a Component
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentName : TaxonomyElementString
    {

    }

    /// <summary>
    /// An identifier for a component
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// UUID for an individual piece of equipment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A UUID for a OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A user-defined identifier for an OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A record of a condition of a PV system or equipment that may merit investigation or action.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMIssue
    {
        [Newtonsoft.Json.JsonProperty("IssueID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueID IssueID { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueUUID IssueUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactSafety", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactSafety ImpactSafety { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactProduction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactProduction ImpactProduction { get; set; }

        [Newtonsoft.Json.JsonProperty("ImpactCapability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImpactCapability ImpactCapability { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueCause", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueCause IssueCause { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueCauseConfidenceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueCauseConfidenceLevel IssueCauseConfidenceLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueConfidenceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueConfidenceLevel IssueConfidenceLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueStatus IssueStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("EnergyLoss", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergyLoss EnergyLoss { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureRecords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureRecords FailureRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalConditions ExternalConditions { get; set; }

        [Newtonsoft.Json.JsonProperty("DetectionMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DetectionMethod DetectionMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("UpdateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateLast UpdateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueFoundDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFoundDate IssueFoundDate { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueResolution IssueResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("IssueResolutionDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueResolutionDate IssueResolutionDate { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The status of an OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueStatus : TaxonomyElementString
    {

    }

    /// <summary>
    /// The level of confidence that an OMIssue is factual
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueConfidenceLevel : TaxonomyElementString
    {

    }

    /// <summary>
    /// The cause underlying an OMIssue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueCause : TaxonomyElementString
    {

    }

    /// <summary>
    /// The level of confidence that the cause of an OMIssue is accurate.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueCauseConfidenceLevel : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureRecords : global::System.Collections.Generic.List<FailureRecord>
    {

    }

    /// <summary>
    /// An event or condition outside of a PV system that affects the PV system's operation or condition.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalCondition : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalConditions : global::System.Collections.Generic.List<ExternalCondition>
    {

    }

    /// <summary>
    /// This concept provides a cryptographically secure identity for a device and originates from the distributed ledger or blockchain technologies. The Cryptographic Key ID is derived from an asymmetric private/public key pair, typically generated on the device itself and stored securely, preferably in a hardware-secured environment like a Secure Element (SE). Private keys remain within this secure environment to prevent exposure. The CryptographicKeyID consists of a type identifier, the hash output of public-key-material, and optionally, a CRC check for error detection, ensuring uniqueness and integrity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CryptographicKeyID : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CryptographicKeyIDs : global::System.Collections.Generic.List<CryptographicKeyID>
    {

    }

    /// <summary>
    /// The method for detecting an Issue or failure.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DetectionMethod : TaxonomyElementString
    {

    }

    /// <summary>
    /// Datetime of the latest update
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateLast : TaxonomyElementString
    {

    }

    /// <summary>
    /// The date or datetime that an OMIssue is identified.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueFoundDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Record of actions or decisions taken to resolve or address an Issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueResolution : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date of the resolution of an Issue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueResolutionDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// A Task object customized for Operations and Maintenance
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMTask : Task
    {
        [Newtonsoft.Json.JsonProperty("TaskPriority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskPriority TaskPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("UpdateLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateLast UpdateLast { get; set; }

        [Newtonsoft.Json.JsonProperty("MaintenanceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaintenanceType MaintenanceType { get; set; }

        [Newtonsoft.Json.JsonProperty("OMIssues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMIssues OMIssues { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskBudget", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskBudget TaskBudget { get; set; }

        [Newtonsoft.Json.JsonProperty("OMActivityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMActivityType OMActivityType { get; set; }

        [Newtonsoft.Json.JsonProperty("OMWorkPlan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMWorkPlan OMWorkPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("OMSkillQualLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OMSkillQualLevel OMSkillQualLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceLevelAgreement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceLevelAgreement ServiceLevelAgreement { get; set; }

    }

    /// <summary>
    /// Priority of a Task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskPriority : TaxonomyElementString
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMIssues : global::System.Collections.Generic.List<OMIssue>
    {

    }

    /// <summary>
    /// Category of maintenance activity or action
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaintenanceType : TaxonomyElementString
    {

    }

    /// <summary>
    /// A collection of terms that specify budgeted resources for a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskBudget
    {
        [Newtonsoft.Json.JsonProperty("TaskBudgetFunds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskBudgetFunds TaskBudgetFunds { get; set; }

        [Newtonsoft.Json.JsonProperty("TaskBudgetHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskBudgetHours TaskBudgetHours { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Labor hour budget for a task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskBudgetHours : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Funds budget for a task.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskBudgetFunds : TaxonomyElementNumber
    {

    }

    /// <summary>
    /// Date and time that a Task is started
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskStartedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The datetime a task is created
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskCreatedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The agency or testing center that grants the certification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificationAgency : Entity
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificationAgencyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificationAgencyName CertificationAgencyName { get; set; }

    }

    /// <summary>
    /// The activity involved in an Operations and Maintenace task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMActivityType : TaxonomyElementString
    {

    }


    /// <summary>
    /// A step by step procedure for carrying out an operations and maintenance (OM) task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMWorkPlan
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Skill, qualification or certification necessary to perform an operations and maintenance (OM) task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OMSkillQualLevel : TaxonomyElementString
    {

    }

    /// <summary>
    /// Name of the TestLab
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestLabName : TaxonomyElementString
    {

    }

    /// <summary>
    /// A laboratory that performs testing to standards. Implementation partner rather than the certifier of the standard. 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestLab : Entity
    {
        [Newtonsoft.Json.JsonProperty("TestLabName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestLabName TestLabName { get; set; }

    }

    /// <summary>
    /// The date and time that a failure was detected
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureDetectedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The datetime that the failure occurred
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The datetime that the failure is corrected or resolved.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureResolvedDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// The resolution of the failure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureResolution : TaxonomyElementString
    {

    }

    /// <summary>
    /// Contract or agreement between a service provider and a customer which outlines the terms and expectations of service to be provided, level of expected performance, performance measures, exclusions and redress.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceLevelAgreement
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Date of authorization granted by a utility or regulatory body allowing the DER to connect and interact with the power grid
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionToOperateDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// Date when a solar energy system or battery storage is placed in service, meaning it has been installed, tested, and deemed operational for its intended use.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommissionDate : TaxonomyElementString
    {

    }

    /// <summary>
    /// A UUID for a Node, which is an element of a topology.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeUUID : TaxonomyElementString
    {

    }

    /// <summary>
    /// A node is an element of a PVCollada file that describes geospatial positions and mechanical relationships.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Node
    {
        [Newtonsoft.Json.JsonProperty("NodeUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NodeUUID NodeUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("PVColladaID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVColladaID PVColladaID { get; set; }

        [Newtonsoft.Json.JsonProperty("PVColladaFileID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PVColladaFileID PVColladaFileID { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nodes : global::System.Collections.Generic.List<Node>
    {

    }

    /// <summary>
    /// An identifier for an object in a PVCollada file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVColladaID : TaxonomyElementString
    {

    }

    /// <summary>
    /// An identifier for a PVCollada file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PVColladaFileID : TaxonomyElementString
    {

    }

    /// <summary>
    /// True if an Assembly, Device or Component has parts that can be serviced or replaced without violating a warranty.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsMaintainable : TaxonomyElementBoolean
    {

    }

    /// <summary>
    /// The beginning time for a TimeEntry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntryStartTime : TaxonomyElementString
    {

    }

    /// <summary>
    /// The ending time of a TimeEntry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeEntryEndTime : TaxonomyElementString
    {

    }

    /// <summary>
    /// Data and notes resulting from execution of a Task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskResult
    {
        [Newtonsoft.Json.JsonProperty("FileFolderURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileFolderURL FileFolderURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        private global::System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        private global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new global::System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskResults : global::System.Collections.Generic.List<TaskResult>
    {

    }



}
